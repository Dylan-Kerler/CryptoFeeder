{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/Sliders.js\";\nimport React, { useState, useEffect } from \"react\";\nimport settingsStore, { settingsActions } from \"./Store/Settings\";\n\nconst Slider = props => {\n  const _useState = useState(props.defaultValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        sliderValue = _useState2[0],\n        setSliderValue = _useState2[1];\n\n  const handleSliderChange = event => {\n    setSliderValue(event.target.value);\n  }; // Initialise/Update the settings store every time sliderValue changes\n\n\n  useEffect(() => {\n    settingsStore.dispatch({\n      type: props.setttingsType,\n      data: sliderValue\n    });\n    console.log(sliderValue);\n  }, [sliderValue]);\n\n  const titleText = (() => {\n    switch (props.dataType) {\n      case \"volume\":\n        return \"Minimum volume\";\n\n      case \"price\":\n        return \"Minimum price increase\";\n\n      case \"liquidity\":\n        return \"Minimum order size\";\n\n      default:\n        return `Error! Invalid datatype, got '${props.dataType}'`;\n    }\n  })();\n\n  return React.createElement(\"div\", {\n    id: `min_${props.dataType}_slider_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, titleText, \": \", React.createElement(\"b\", {\n    style: {\n      color: \"grey\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, sliderValue)), React.createElement(\"input\", {\n    type: \"range\",\n    min: \"0\",\n    max: props.max,\n    step: props.step,\n    id: \"test\",\n    onChange: handleSliderChange,\n    value: sliderValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    className: \"min_value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, `${props.minText}`), React.createElement(\"strong\", {\n    className: \"max_value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, `${props.maxText}`)));\n};\n\nconst Sliders = () => {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Slider, {\n    dataType: \"volume\",\n    setttingsType: settingsActions.UPDATE_MIN_VOLUME,\n    max: \"1000000\",\n    step: \"1\",\n    minText: \"$0\",\n    maxText: \"$5,000,000\",\n    defaultValue: \"50000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    dataType: \"price\",\n    setttingsType: settingsActions.UPDATE_MIN_PRICE_INCREASE,\n    max: \"300\",\n    step: \"1\",\n    minText: \"0%\",\n    maxText: \"300%\",\n    defaultValue: \"5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(Slider, {\n    dataType: \"liquidity\",\n    setttingsType: settingsActions.UPDATE_MIN_ORDER_SIZE,\n    max: \"3000000\",\n    step: \"1\",\n    minText: \"$0\",\n    maxText: \"$3,000,000\",\n    defaultValue: \"1500000\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n};\n\nexport default Sliders;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/Sliders.js"],"names":["React","useState","useEffect","settingsStore","settingsActions","Slider","props","defaultValue","sliderValue","setSliderValue","handleSliderChange","event","target","value","dispatch","type","setttingsType","data","console","log","titleText","dataType","color","max","step","minText","maxText","Sliders","UPDATE_MIN_VOLUME","UPDATE_MIN_PRICE_INCREASE","UPDATE_MIN_ORDER_SIZE"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport settingsStore, {settingsActions} from \"./Store/Settings\";\n\nconst Slider = (props) => {\n    const [sliderValue, setSliderValue] = useState(props.defaultValue);\n\n    const handleSliderChange = (event) => {\n        setSliderValue(event.target.value);\n    };\n\n    // Initialise/Update the settings store every time sliderValue changes\n    useEffect(() => {\n        settingsStore.dispatch({type: props.setttingsType, data: sliderValue});\n        console.log(sliderValue);\n    }, [sliderValue]);\n\n    const titleText = (() => {\n        switch (props.dataType) {\n            case \"volume\":\n                return \"Minimum volume\";\n            case \"price\":\n                return \"Minimum price increase\";\n            case \"liquidity\":\n                return \"Minimum order size\";\n            default:\n                return `Error! Invalid datatype, got '${props.dataType}'`;\n        }\n    })();\n\n    return (\n        <div id={`min_${props.dataType}_slider_div`}>\n            <h2>{titleText}: <b style={{color: \"grey\"}}>{sliderValue}</b></h2>\n            <input type=\"range\" min={\"0\"} max={props.max} step={props.step} id=\"test\" onChange={handleSliderChange} value={sliderValue}/>\n            <div>\n                <strong className=\"min_value\">{`${props.minText}`}</strong>\n                <strong className=\"max_value\">{`${props.maxText}`}</strong>\n            </div>\n        </div>\n    )\n};\n\nconst Sliders = () => {\n    return (\n        <React.Fragment>\n            <Slider dataType={\"volume\"} setttingsType={settingsActions.UPDATE_MIN_VOLUME}\n                    max={\"1000000\"} step={\"1\"}  minText={\"$0\"} maxText={\"$5,000,000\"} defaultValue={\"50000\"}/>\n            <Slider dataType={\"price\"} setttingsType={settingsActions.UPDATE_MIN_PRICE_INCREASE}\n                    max={\"300\"} step={\"1\"} minText={\"0%\"} maxText={\"300%\"} defaultValue={\"5\"}/>\n            <Slider dataType={\"liquidity\"} setttingsType={settingsActions.UPDATE_MIN_ORDER_SIZE}\n                    max={\"3000000\"} step={\"1\"} minText={\"$0\"} maxText={\"$3,000,000\"} defaultValue={\"1500000\"}/>\n        </React.Fragment>\n\n    )\n};\n\nexport default Sliders;"]},"metadata":{},"sourceType":"module"}