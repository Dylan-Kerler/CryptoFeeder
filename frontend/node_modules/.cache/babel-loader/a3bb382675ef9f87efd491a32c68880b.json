{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\n\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({\n    concat\n  }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e)\n/* istanbul ignore next */\n{\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n\n\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = {\n    concat,\n    mask,\n    unmask\n  };\n}","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/binance/node_modules/ws/lib/BufferUtil.js"],"names":["safeBuffer","require","Buffer","concat","list","totalLength","target","allocUnsafe","offset","i","length","buf","copy","bufferUtil","module","exports","Object","assign","BufferUtil","e","mask","source","output","unmask","buffer"],"mappings":"AAAA;;;;;AAMA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AAEA,MAAMC,MAAM,GAAGF,UAAU,CAACE,MAA1B;AAEA;;;;;;;;;AAQA,MAAMC,MAAM,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB;AACpC,QAAMC,MAAM,GAAGJ,MAAM,CAACK,WAAP,CAAmBF,WAAnB,CAAf;AACA,MAAIG,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAME,GAAG,GAAGP,IAAI,CAACK,CAAD,CAAhB;AACAE,IAAAA,GAAG,CAACC,IAAJ,CAASN,MAAT,EAAiBE,MAAjB;AACAA,IAAAA,MAAM,IAAIG,GAAG,CAACD,MAAd;AACD;;AAED,SAAOJ,MAAP;AACD,CAXD;;AAaA,IAAI;AACF,QAAMO,UAAU,GAAGZ,OAAO,CAAC,YAAD,CAA1B;;AAEAa,EAAAA,MAAM,CAACC,OAAP,GAAiBC,MAAM,CAACC,MAAP,CAAc;AAAEd,IAAAA;AAAF,GAAd,EAA0BU,UAAU,CAACK,UAAX,IAAyBL,UAAnD,CAAjB;AACD,CAJD,CAIE,OAAOM,CAAP;AAAU;AAA2B;AACrC;;;;;;;;;;AAUA,QAAMC,IAAI,GAAG,CAACC,MAAD,EAASD,IAAT,EAAeE,MAAf,EAAuBd,MAAvB,EAA+BE,MAA/B,KAA0C;AACrD,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/Ba,MAAAA,MAAM,CAACd,MAAM,GAAGC,CAAV,CAAN,GAAqBY,MAAM,CAACZ,CAAD,CAAN,GAAYW,IAAI,CAACX,CAAC,GAAG,CAAL,CAArC;AACD;AACF,GAJD;AAMA;;;;;;;;;AAOA,QAAMc,MAAM,GAAG,CAACC,MAAD,EAASJ,IAAT,KAAkB;AAC/B;AACA,UAAMV,MAAM,GAAGc,MAAM,CAACd,MAAtB;;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/Be,MAAAA,MAAM,CAACf,CAAD,CAAN,IAAaW,IAAI,CAACX,CAAC,GAAG,CAAL,CAAjB;AACD;AACF,GAND;;AAQAK,EAAAA,MAAM,CAACC,OAAP,GAAiB;AAAEZ,IAAAA,MAAF;AAAUiB,IAAAA,IAAV;AAAgBG,IAAAA;AAAhB,GAAjB;AACD","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n"]},"metadata":{},"sourceType":"script"}