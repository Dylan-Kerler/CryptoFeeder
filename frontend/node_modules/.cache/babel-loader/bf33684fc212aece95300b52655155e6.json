{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext, useState } from \"react\";\nimport socket from \"socket.io\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data); // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\nconst TimeContext = React.createContext(Date.now());\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const _useState = useState(Date.now()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"]; // Initialise the anomalies state\n\n  useEffect(() => {\n    //Hit the cache api and set the initial state\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies\n    //On new anomaly, determine the type then push to the anomalies state\n\n    socket.on(\"NEW_ANOMALY\", anomaly => {\n      console.log(anomaly);\n    });\n  }, []); // Start setNow interval\n\n  useEffect(() => {\n    const threadId = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(threadId);\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(TimeContext.Provider, {\n    value: now,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, dataDivs)));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, //Anomalies are organised with oldest -> newest (needs to be reversed)\n  relevantAnomalies.reverse()));\n};\n\nconst ParsedText = ({\n  anomaly,\n  dataType\n}) => {\n  let element = \"\";\n  const NOW = useContext(TimeContext);\n  const timePassed = NOW - anomaly.data.timestamp * 1000;\n  const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\" : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\" : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n  const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n  const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n  switch (anomaly.type) {\n    case \"volumeAnomaly\":\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, anomaly.data.total + \" \", \" BTC worth of \", anomaly.coin + \" \", \"was \", anomaly.data.isBuyVolume ? \"bought \" : \"sold \", \" on \", anomaly.exchange + \" \", \"in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \", \" higher than the 200 hourly average.\", movingTimeString);\n      break;\n\n    case \"anomalyPriceRange\":\n      console.log(anomaly);\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, anomaly.coin, \" just \", anomaly.data.positive ? \"pumped \" : \"dumped \", \" \", (anomaly.data.change * 100).toFixed(2), \"% in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.change / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\", \" higher than the 200 hourly average\", \" \" + movingTimeString);\n      break;\n\n    case \"OrderBookIncrease\":\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, \"$\", anomaly.data.total, \" \", anomaly.data.isBuySide ? \"buy \" : \"sell\", \" wall for \", anomaly.coin + \" \", \"appeared \", movingTimeString, \" on \", anomaly.exchange, \" - A \", ((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2), \"% increase from the 200 hourly average\");\n      break;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, element, React.createElement(\"p\", {\n    className: \"data_timestamp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, new Date(anomaly.data.timestamp * 1000).toGMTString()));\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","socket","anomaliesReducer","state","action","type","push","data","JSON","parse","stringify","AnomaliesContext","createContext","TimeContext","Date","now","DataDisplay","initialState","anomalies","dispatchAnomalies","setNow","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","on","anomaly","console","log","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","slice","toUpperCase","reverse","ParsedText","element","NOW","timePassed","timestamp","movingTimeString","Math","floor","anomalyTimeRange","limitTimestamp","anomalyTimeRangeString","total","coin","isBuyVolume","exchange","hourlyMa200","toFixed","positive","change","maRange","isBuySide","buySide","maTotal","toGMTString"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState} from \"react\";\nimport socket from \"socket.io\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\nconst TimeContext = React.createContext(Date.now());\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    // Initialise the anomalies state\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies\n        //On new anomaly, determine the type then push to the anomalies state\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            console.log(anomaly);\n        });\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <TimeContext.Provider value={now}>\n                <AnomaliesContext.Provider value={anomalies}>\n                    {dataDivs}\n                </AnomaliesContext.Provider>\n            </TimeContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`} key={index}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                {\n                    //Anomalies are organised with oldest -> newest (needs to be reversed)\n                    relevantAnomalies.reverse()\n                }\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = ({anomaly, dataType}) => {\n    let element = \"\";\n    const NOW = useContext(TimeContext);\n    const timePassed = NOW - anomaly.data.timestamp * 1000;\n    const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\"\n                                                    : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\"\n                                                    : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n\n    const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n    switch (anomaly.type) {\n        case \"volumeAnomaly\":\n            element = <p className={`${dataType}_text`}>\n                            {anomaly.data.total + \" \"} BTC worth of {anomaly.coin + \" \"}\n                            was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"} on {anomaly.exchange + \" \"}\n                            in the past {anomalyTimeRangeString} -\n                            {\" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \"} higher than the 200 hourly average.\n                            {movingTimeString}\n                        </p>;\n            break;\n        case \"anomalyPriceRange\":\n            console.log(anomaly);\n            element = <p className={`${dataType}_text`}>\n                        {anomaly.coin} just {anomaly.data.positive ? \"pumped \" : \"dumped \"} {(anomaly.data.change * 100).toFixed(2)}%\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.change / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\"} higher than the 200 hourly average\n                        {\" \" + movingTimeString}\n                    </p>\n            break;\n\n        case \"OrderBookIncrease\":\n            element = <p className={`${dataType}_text`}>\n                        ${anomaly.data.total} {anomaly.data.isBuySide ? \"buy \" : \"sell\"} wall for {anomaly.coin + \" \"}\n                        appeared {movingTimeString} on {anomaly.exchange} - A {((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2)}% increase\n                        from the 200 hourly average\n                    </p>\n            break;\n    }\n\n    return (\n        <React.Fragment>\n            {element}\n            <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}