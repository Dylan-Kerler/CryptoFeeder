{"ast":null,"code":"import _objectSpread from\"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createStore}from\"redux\";import socket from\"../Socket\";var priceActions={UPDATE_PRICE:\"UPDATE_PRICE\"};var priceReducer=function priceReducer(state,action){var newState=_objectSpread({},state);//shallow copy is sufficient here\nswitch(action.type){case priceActions.UPDATE_PRICE:newState[action.data.pair]=parseFloat(action.data.price.toFixed(0));break;default:console.log(\"Invalid action type for priceReducer, got: \",action.type);break;}return newState;};var initialState={};var priceStore=createStore(priceReducer,initialState);socket.on(\"NEW_BTC_PRICE\",function(price){console.log(price);priceStore.dispatch({type:priceActions.UPDATE_PRICE,data:{pair:\"BTCUSDT\",price:parseFloat(price)}});});export default priceStore;export{priceReducer};","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/src/ReactComponents/Store/Price.js"],"names":["createStore","socket","priceActions","UPDATE_PRICE","priceReducer","state","action","newState","type","data","pair","parseFloat","price","toFixed","console","log","initialState","priceStore","on","dispatch"],"mappings":"sIAAA,OAASA,WAAT,KAA4B,OAA5B,CACA,MAAOC,CAAAA,MAAP,KAAmB,WAAnB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,YAAY,CAAE,cADG,CAArB,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAQC,MAAR,CAAmB,CACpC,GAAMC,CAAAA,QAAQ,kBAAOF,KAAP,CAAd,CAA6B;AAC7B,OAAQC,MAAM,CAACE,IAAf,EACI,IAAKN,CAAAA,YAAY,CAACC,YAAlB,CACII,QAAQ,CAACD,MAAM,CAACG,IAAP,CAAYC,IAAb,CAAR,CAA6BC,UAAU,CAACL,MAAM,CAACG,IAAP,CAAYG,KAAZ,CAAkBC,OAAlB,CAA0B,CAA1B,CAAD,CAAvC,CACA,MACJ,QACIC,OAAO,CAACC,GAAR,CAAY,6CAAZ,CAA2DT,MAAM,CAACE,IAAlE,EACA,MANR,CASA,MAAOD,CAAAA,QAAP,CACH,CAZD,CAcA,GAAMS,CAAAA,YAAY,CAAG,EAArB,CAEA,GAAMC,CAAAA,UAAU,CAAGjB,WAAW,CAACI,YAAD,CAAeY,YAAf,CAA9B,CACAf,MAAM,CAACiB,EAAP,CAAU,eAAV,CAA2B,SAAAN,KAAK,CAAI,CAChCE,OAAO,CAACC,GAAR,CAAYH,KAAZ,EACAK,UAAU,CAACE,QAAX,CAAoB,CAChBX,IAAI,CAAEN,YAAY,CAACC,YADH,CAEhBM,IAAI,CAAE,CACFC,IAAI,CAAE,SADJ,CAEFE,KAAK,CAAED,UAAU,CAACC,KAAD,CAFf,CAFU,CAApB,EAOH,CATD,EAWA,cAAeK,CAAAA,UAAf,CACA,OAASb,YAAT","sourcesContent":["import { createStore } from \"redux\";\nimport socket from \"../Socket\";\n\nconst priceActions = {\n    UPDATE_PRICE: \"UPDATE_PRICE\",\n};\n\nconst priceReducer = (state, action) => {\n    const newState = {...state}; //shallow copy is sufficient here\n    switch (action.type) {\n        case priceActions.UPDATE_PRICE:\n            newState[action.data.pair] = parseFloat(action.data.price.toFixed(0));\n            break;\n        default:\n            console.log(\"Invalid action type for priceReducer, got: \", action.type);\n            break;\n    }\n\n    return newState;\n};\n\nconst initialState = {};\n\nconst priceStore = createStore(priceReducer, initialState);\nsocket.on(\"NEW_BTC_PRICE\", price => {\n    console.log(price);\n    priceStore.dispatch({\n        type: priceActions.UPDATE_PRICE,\n        data: {\n            pair: \"BTCUSDT\",\n            price: parseFloat(price)\n        }\n    })\n});\n\nexport default priceStore;\nexport { priceReducer };"]},"metadata":{},"sourceType":"module"}