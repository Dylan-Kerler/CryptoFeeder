{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nconst EventEmitter = require('events');\n\nconst crypto = require('crypto');\n\nconst Ultron = require('ultron');\n\nconst https = require('https');\n\nconst http = require('http');\n\nconst url = require('url');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\n\nconst EventTarget = require('./EventTarget');\n\nconst Extensions = require('./Extensions');\n\nconst constants = require('./Constants');\n\nconst Receiver = require('./Receiver');\n\nconst Sender = require('./Sender');\n\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\n\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {String} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor(address, protocols, options) {\n    super();\n\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols === 'string') {\n      protocols = [protocols];\n    } else if (!Array.isArray(protocols)) {\n      options = protocols;\n      protocols = [];\n    }\n\n    this.readyState = WebSocket.CONNECTING;\n    this.bytesReceived = 0;\n    this.extensions = {};\n    this.protocol = '';\n    this._binaryType = constants.BINARY_TYPES[0];\n    this._finalize = this.finalize.bind(this);\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._finalized = false;\n    this._closeCode = 1006;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n    this._ultron = null;\n\n    if (Array.isArray(address)) {\n      initAsServerClient.call(this, address[0], address[1], options);\n    } else {\n      initAsClient.call(this, address, protocols, options);\n    }\n  }\n\n  get CONNECTING() {\n    return WebSocket.CONNECTING;\n  }\n\n  get CLOSING() {\n    return WebSocket.CLOSING;\n  }\n\n  get CLOSED() {\n    return WebSocket.CLOSED;\n  }\n\n  get OPEN() {\n    return WebSocket.OPEN;\n  }\n  /**\n   * @type {Number}\n   */\n\n\n  get bufferedAmount() {\n    var amount = 0;\n\n    if (this._socket) {\n      amount = this._socket.bufferSize + this._sender._bufferedBytes;\n    }\n\n    return amount;\n  }\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */\n\n\n  get binaryType() {\n    return this._binaryType;\n  }\n\n  set binaryType(type) {\n    if (constants.BINARY_TYPES.indexOf(type) < 0) return;\n    this._binaryType = type; //\n    // Allow to change `binaryType` on the fly.\n    //\n\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @private\n   */\n\n\n  setSocket(socket, head) {\n    socket.setTimeout(0);\n    socket.setNoDelay();\n    this._receiver = new Receiver(this.extensions, this._maxPayload, this.binaryType);\n    this._sender = new Sender(socket, this.extensions);\n    this._ultron = new Ultron(socket);\n    this._socket = socket;\n\n    this._ultron.on('close', this._finalize);\n\n    this._ultron.on('error', this._finalize);\n\n    this._ultron.on('end', this._finalize);\n\n    if (head.length > 0) socket.unshift(head);\n\n    this._ultron.on('data', data => {\n      this.bytesReceived += data.length;\n\n      this._receiver.add(data);\n    });\n\n    this._receiver.onmessage = data => this.emit('message', data);\n\n    this._receiver.onping = data => {\n      this.pong(data, !this._isServer, true);\n      this.emit('ping', data);\n    };\n\n    this._receiver.onpong = data => this.emit('pong', data);\n\n    this._receiver.onclose = (code, reason) => {\n      this._closeFrameReceived = true;\n      this._closeMessage = reason;\n      this._closeCode = code;\n      if (!this._finalized) this.close(code, reason);\n    };\n\n    this._receiver.onerror = (error, code) => {\n      this._closeMessage = '';\n      this._closeCode = code; //\n      // Ensure that the error is emitted even if `WebSocket#finalize()` has\n      // already been called.\n      //\n\n      this.readyState = WebSocket.CLOSING;\n      this.emit('error', error);\n      this.finalize(true);\n    };\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n  /**\n   * Clean up and release internal resources.\n   *\n   * @param {(Boolean|Error)} error Indicates whether or not an error occurred\n   * @private\n   */\n\n\n  finalize(error) {\n    if (this._finalized) return;\n    this.readyState = WebSocket.CLOSING;\n    this._finalized = true;\n    if (typeof error === 'object') this.emit('error', error);\n    if (!this._socket) return this.emitClose();\n    clearTimeout(this._closeTimer);\n    this._closeTimer = null;\n\n    this._ultron.destroy();\n\n    this._ultron = null;\n\n    this._socket.on('error', constants.NOOP);\n\n    if (!error) this._socket.end();else this._socket.destroy();\n    this._socket = null;\n    this._sender = null;\n\n    this._receiver.cleanup(() => this.emitClose());\n\n    this._receiver = null;\n  }\n  /**\n   * Emit the `close` event.\n   *\n   * @private\n   */\n\n\n  emitClose() {\n    this.readyState = WebSocket.CLOSED;\n    this.emit('close', this._closeCode, this._closeMessage);\n\n    if (this.extensions[PerMessageDeflate.extensionName]) {\n      this.extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this.extensions = null;\n    this.removeAllListeners();\n  }\n  /**\n   * Pause the socket stream.\n   *\n   * @public\n   */\n\n\n  pause() {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.pause();\n  }\n  /**\n   * Resume the socket stream\n   *\n   * @public\n   */\n\n\n  resume() {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.resume();\n  }\n  /**\n   * Start a closing handshake.\n   *\n   *            +----------+     +-----------+   +----------+\n   *     + - - -|ws.close()|---->|close frame|-->|ws.close()|- - - -\n   *            +----------+     +-----------+   +----------+       |\n   *     |      +----------+     +-----------+         |\n   *            |ws.close()|<----|close frame|<--------+            |\n   *            +----------+     +-----------+         |\n   *  CLOSING         |              +---+             |         CLOSING\n   *                  |          +---|fin|<------------+\n   *     |            |          |   +---+                          |\n   *                  |          |   +---+      +-------------+\n   *     |            +----------+-->|fin|----->|ws.finalize()| - - +\n   *                             |   +---+      +-------------+\n   *     |     +-------------+   |\n   *      - - -|ws.finalize()|<--+\n   *           +-------------+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n\n\n  close(code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n\n      this.finalize(new Error('closed before the connection is established'));\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n\n    this._sender.close(code, data, !this._isServer, err => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n      this._closeFrameSent = true;\n\n      if (!this._finalized) {\n        if (this._closeFrameReceived) this._socket.end(); //\n        // Ensure that the connection is cleaned up even when the closing\n        // handshake fails.\n        //\n\n        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n      }\n    });\n  }\n  /**\n   * Send a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n\n\n  ping(data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.ping(data || constants.EMPTY_BUFFER, mask);\n  }\n  /**\n   * Send a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n\n\n  pong(data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n\n    this._sender.pong(data || constants.EMPTY_BUFFER, mask);\n  }\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n\n\n  send(data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      if (cb) cb(new Error('not opened'));else throw new Error('not opened');\n      return;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    const opts = Object.assign({\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true\n    }, options);\n\n    if (!this.extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);\n  }\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n\n\n  terminate() {\n    if (this.readyState === WebSocket.CLOSED) return;\n\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n\n      this.finalize(new Error('closed before the connection is established'));\n      return;\n    }\n\n    this.finalize(true);\n  }\n\n}\n\nWebSocket.CONNECTING = 0;\nWebSocket.OPEN = 1;\nWebSocket.CLOSING = 2;\nWebSocket.CLOSED = 3; //\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n\n['open', 'error', 'close', 'message'].forEach(method => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get() {\n      const listeners = this.listeners(method);\n\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n    },\n\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set(listener) {\n      const listeners = this.listeners(method);\n\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n\n      this.addEventListener(method, listener);\n    }\n\n  });\n});\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\nmodule.exports = WebSocket;\n/**\n * Initialize a WebSocket server client.\n *\n * @param {http.IncomingMessage} req The request object\n * @param {net.Socket} socket The network socket between the server and client\n * @param {Buffer} head The first packet of the upgraded stream\n * @param {Object} options WebSocket attributes\n * @param {Number} options.protocolVersion The WebSocket protocol version\n * @param {Object} options.extensions The negotiated extensions\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {String} options.protocol The chosen subprotocol\n * @private\n */\n\nfunction initAsServerClient(socket, head, options) {\n  this.protocolVersion = options.protocolVersion;\n  this._maxPayload = options.maxPayload;\n  this.extensions = options.extensions;\n  this.protocol = options.protocol;\n  this._isServer = true;\n  this.setSocket(socket, head);\n}\n/**\n * Initialize a WebSocket client.\n *\n * @param {String} address The URL to which to connect\n * @param {String[]} protocols The list of subprotocols\n * @param {Object} options Connection options\n * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request\n * @param {String} options.localAddress Local interface to bind for network connections\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {Object} options.headers An object containing request headers\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {http.Agent} options.agent Use the specified Agent\n * @param {String} options.host Value of the `Host` header\n * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).\n * @param {Function} options.checkServerIdentity A function to validate the server hostname\n * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n * @param {String} options.passphrase The passphrase for the private key or pfx\n * @param {String} options.ciphers The ciphers to use or exclude\n * @param {String} options.ecdhCurve The curves for ECDH key agreement to use or exclude\n * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n * @param {(String|String[]|Buffer|Buffer[])} options.key The private key\n * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n * @private\n */\n\n\nfunction initAsClient(address, protocols, options) {\n  options = Object.assign({\n    protocolVersion: protocolVersions[1],\n    protocol: protocols.join(','),\n    perMessageDeflate: true,\n    handshakeTimeout: null,\n    localAddress: null,\n    headers: null,\n    family: null,\n    origin: null,\n    agent: null,\n    host: null,\n    //\n    // SSL options.\n    //\n    checkServerIdentity: null,\n    rejectUnauthorized: null,\n    passphrase: null,\n    ciphers: null,\n    ecdhCurve: null,\n    cert: null,\n    key: null,\n    pfx: null,\n    ca: null\n  }, options);\n\n  if (protocolVersions.indexOf(options.protocolVersion) === -1) {\n    throw new Error(`unsupported protocol version: ${options.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n  }\n\n  this.protocolVersion = options.protocolVersion;\n  this._isServer = false;\n  this.url = address;\n  const serverUrl = url.parse(address);\n  const isUnixSocket = serverUrl.protocol === 'ws+unix:';\n\n  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {\n    throw new Error('invalid url');\n  }\n\n  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';\n  const key = crypto.randomBytes(16).toString('base64');\n  const httpObj = isSecure ? https : http;\n  var perMessageDeflate;\n  const requestOptions = {\n    port: serverUrl.port || (isSecure ? 443 : 80),\n    host: serverUrl.hostname,\n    path: '/',\n    headers: {\n      'Sec-WebSocket-Version': options.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket'\n    }\n  };\n  if (options.headers) Object.assign(requestOptions.headers, options.headers);\n\n  if (options.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(options.perMessageDeflate !== true ? options.perMessageDeflate : {}, false);\n    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n\n  if (options.protocol) {\n    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;\n  }\n\n  if (options.origin) {\n    if (options.protocolVersion < 13) {\n      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;\n    } else {\n      requestOptions.headers.Origin = options.origin;\n    }\n  }\n\n  if (options.host) requestOptions.headers.Host = options.host;\n  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;\n  if (options.localAddress) requestOptions.localAddress = options.localAddress;\n  if (options.family) requestOptions.family = options.family;\n\n  if (isUnixSocket) {\n    const parts = serverUrl.path.split(':');\n    requestOptions.socketPath = parts[0];\n    requestOptions.path = parts[1];\n  } else if (serverUrl.path) {\n    //\n    // Make sure that path starts with `/`.\n    //\n    if (serverUrl.path.charAt(0) !== '/') {\n      requestOptions.path = `/${serverUrl.path}`;\n    } else {\n      requestOptions.path = serverUrl.path;\n    }\n  }\n\n  var agent = options.agent; //\n  // A custom agent is required for these options.\n  //\n\n  if (options.rejectUnauthorized != null || options.checkServerIdentity || options.passphrase || options.ciphers || options.ecdhCurve || options.cert || options.key || options.pfx || options.ca) {\n    if (options.passphrase) requestOptions.passphrase = options.passphrase;\n    if (options.ciphers) requestOptions.ciphers = options.ciphers;\n    if (options.ecdhCurve) requestOptions.ecdhCurve = options.ecdhCurve;\n    if (options.cert) requestOptions.cert = options.cert;\n    if (options.key) requestOptions.key = options.key;\n    if (options.pfx) requestOptions.pfx = options.pfx;\n    if (options.ca) requestOptions.ca = options.ca;\n\n    if (options.checkServerIdentity) {\n      requestOptions.checkServerIdentity = options.checkServerIdentity;\n    }\n\n    if (options.rejectUnauthorized != null) {\n      requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n    }\n\n    if (!agent) agent = new httpObj.Agent(requestOptions);\n  }\n\n  if (agent) requestOptions.agent = agent;\n  this._req = httpObj.get(requestOptions);\n\n  if (options.handshakeTimeout) {\n    this._req.setTimeout(options.handshakeTimeout, () => {\n      this._req.abort();\n\n      this.finalize(new Error('opening handshake has timed out'));\n    });\n  }\n\n  this._req.on('error', error => {\n    if (this._req.aborted) return;\n    this._req = null;\n    this.finalize(error);\n  });\n\n  this._req.on('response', res => {\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n\n      this.finalize(new Error(`unexpected server response (${res.statusCode})`));\n    }\n  });\n\n  this._req.on('upgrade', (res, socket, head) => {\n    this.emit('headers', res.headers, res); //\n    // The user may have closed the connection from a listener of the `headers`\n    // event.\n    //\n\n    if (this.readyState !== WebSocket.CONNECTING) return;\n    this._req = null;\n    const digest = crypto.createHash('sha1').update(key + constants.GUID, 'binary').digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      socket.destroy();\n      return this.finalize(new Error('invalid server key'));\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (options.protocol || '').split(/, */);\n    var protError;\n\n    if (!options.protocol && serverProt) {\n      protError = 'server sent a subprotocol even though none requested';\n    } else if (options.protocol && !serverProt) {\n      protError = 'server sent no subprotocol even though requested';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n      protError = 'server responded with an invalid protocol';\n    }\n\n    if (protError) {\n      socket.destroy();\n      return this.finalize(new Error(protError));\n    }\n\n    if (serverProt) this.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const serverExtensions = Extensions.parse(res.headers['sec-websocket-extensions']);\n\n        if (serverExtensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(serverExtensions[PerMessageDeflate.extensionName]);\n          this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        socket.destroy();\n        this.finalize(new Error('invalid Sec-WebSocket-Extensions header'));\n        return;\n      }\n    }\n\n    this.setSocket(socket, head);\n  });\n}","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/binance/node_modules/ws/lib/WebSocket.js"],"names":["EventEmitter","require","crypto","Ultron","https","http","url","PerMessageDeflate","EventTarget","Extensions","constants","Receiver","Sender","protocolVersions","closeTimeout","WebSocket","constructor","address","protocols","options","Array","isArray","readyState","CONNECTING","bytesReceived","extensions","protocol","_binaryType","BINARY_TYPES","_finalize","finalize","bind","_closeFrameReceived","_closeFrameSent","_closeMessage","_closeTimer","_finalized","_closeCode","_receiver","_sender","_socket","_ultron","initAsServerClient","call","initAsClient","CLOSING","CLOSED","OPEN","bufferedAmount","amount","bufferSize","_bufferedBytes","binaryType","type","indexOf","setSocket","socket","head","setTimeout","setNoDelay","_maxPayload","on","length","unshift","data","add","onmessage","emit","onping","pong","_isServer","onpong","onclose","code","reason","close","onerror","error","emitClose","clearTimeout","destroy","NOOP","end","cleanup","extensionName","removeAllListeners","pause","Error","resume","_req","abort","err","ping","mask","failSilently","toString","undefined","EMPTY_BUFFER","send","cb","opts","Object","assign","binary","compress","fin","terminate","forEach","method","defineProperty","prototype","get","listeners","i","_listener","set","listener","removeListener","addEventListener","removeEventListener","module","exports","protocolVersion","maxPayload","join","perMessageDeflate","handshakeTimeout","localAddress","headers","family","origin","agent","host","checkServerIdentity","rejectUnauthorized","passphrase","ciphers","ecdhCurve","cert","key","pfx","ca","serverUrl","parse","isUnixSocket","path","isSecure","randomBytes","httpObj","requestOptions","port","hostname","format","offer","Origin","Host","auth","parts","split","socketPath","charAt","Agent","aborted","res","statusCode","digest","createHash","update","GUID","serverProt","protList","protError","serverExtensions","accept"],"mappings":"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","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst Ultron = require('ultron');\nconst https = require('https');\nconst http = require('http');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst EventTarget = require('./EventTarget');\nconst Extensions = require('./Extensions');\nconst constants = require('./Constants');\nconst Receiver = require('./Receiver');\nconst Sender = require('./Sender');\n\nconst protocolVersions = [8, 13];\nconst closeTimeout = 30 * 1000; // Allow 30 seconds to terminate the connection cleanly.\n\n/**\n * Class representing a WebSocket.\n *\n * @extends EventEmitter\n */\nclass WebSocket extends EventEmitter {\n  /**\n   * Create a new `WebSocket`.\n   *\n   * @param {String} address The URL to which to connect\n   * @param {(String|String[])} protocols The subprotocols\n   * @param {Object} options Connection options\n   */\n  constructor (address, protocols, options) {\n    super();\n\n    if (!protocols) {\n      protocols = [];\n    } else if (typeof protocols === 'string') {\n      protocols = [protocols];\n    } else if (!Array.isArray(protocols)) {\n      options = protocols;\n      protocols = [];\n    }\n\n    this.readyState = WebSocket.CONNECTING;\n    this.bytesReceived = 0;\n    this.extensions = {};\n    this.protocol = '';\n\n    this._binaryType = constants.BINARY_TYPES[0];\n    this._finalize = this.finalize.bind(this);\n    this._closeFrameReceived = false;\n    this._closeFrameSent = false;\n    this._closeMessage = '';\n    this._closeTimer = null;\n    this._finalized = false;\n    this._closeCode = 1006;\n    this._receiver = null;\n    this._sender = null;\n    this._socket = null;\n    this._ultron = null;\n\n    if (Array.isArray(address)) {\n      initAsServerClient.call(this, address[0], address[1], options);\n    } else {\n      initAsClient.call(this, address, protocols, options);\n    }\n  }\n\n  get CONNECTING () { return WebSocket.CONNECTING; }\n  get CLOSING () { return WebSocket.CLOSING; }\n  get CLOSED () { return WebSocket.CLOSED; }\n  get OPEN () { return WebSocket.OPEN; }\n\n  /**\n   * @type {Number}\n   */\n  get bufferedAmount () {\n    var amount = 0;\n\n    if (this._socket) {\n      amount = this._socket.bufferSize + this._sender._bufferedBytes;\n    }\n    return amount;\n  }\n\n  /**\n   * This deviates from the WHATWG interface since ws doesn't support the required\n   * default \"blob\" type (instead we define a custom \"nodebuffer\" type).\n   *\n   * @type {String}\n   */\n  get binaryType () {\n    return this._binaryType;\n  }\n\n  set binaryType (type) {\n    if (constants.BINARY_TYPES.indexOf(type) < 0) return;\n\n    this._binaryType = type;\n\n    //\n    // Allow to change `binaryType` on the fly.\n    //\n    if (this._receiver) this._receiver._binaryType = type;\n  }\n\n  /**\n   * Set up the socket and the internal resources.\n   *\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @private\n   */\n  setSocket (socket, head) {\n    socket.setTimeout(0);\n    socket.setNoDelay();\n\n    this._receiver = new Receiver(this.extensions, this._maxPayload, this.binaryType);\n    this._sender = new Sender(socket, this.extensions);\n    this._ultron = new Ultron(socket);\n    this._socket = socket;\n\n    this._ultron.on('close', this._finalize);\n    this._ultron.on('error', this._finalize);\n    this._ultron.on('end', this._finalize);\n\n    if (head.length > 0) socket.unshift(head);\n\n    this._ultron.on('data', (data) => {\n      this.bytesReceived += data.length;\n      this._receiver.add(data);\n    });\n\n    this._receiver.onmessage = (data) => this.emit('message', data);\n    this._receiver.onping = (data) => {\n      this.pong(data, !this._isServer, true);\n      this.emit('ping', data);\n    };\n    this._receiver.onpong = (data) => this.emit('pong', data);\n    this._receiver.onclose = (code, reason) => {\n      this._closeFrameReceived = true;\n      this._closeMessage = reason;\n      this._closeCode = code;\n      if (!this._finalized) this.close(code, reason);\n    };\n    this._receiver.onerror = (error, code) => {\n      this._closeMessage = '';\n      this._closeCode = code;\n\n      //\n      // Ensure that the error is emitted even if `WebSocket#finalize()` has\n      // already been called.\n      //\n      this.readyState = WebSocket.CLOSING;\n      this.emit('error', error);\n      this.finalize(true);\n    };\n\n    this.readyState = WebSocket.OPEN;\n    this.emit('open');\n  }\n\n  /**\n   * Clean up and release internal resources.\n   *\n   * @param {(Boolean|Error)} error Indicates whether or not an error occurred\n   * @private\n   */\n  finalize (error) {\n    if (this._finalized) return;\n\n    this.readyState = WebSocket.CLOSING;\n    this._finalized = true;\n\n    if (typeof error === 'object') this.emit('error', error);\n    if (!this._socket) return this.emitClose();\n\n    clearTimeout(this._closeTimer);\n    this._closeTimer = null;\n\n    this._ultron.destroy();\n    this._ultron = null;\n\n    this._socket.on('error', constants.NOOP);\n\n    if (!error) this._socket.end();\n    else this._socket.destroy();\n\n    this._socket = null;\n    this._sender = null;\n\n    this._receiver.cleanup(() => this.emitClose());\n    this._receiver = null;\n  }\n\n  /**\n   * Emit the `close` event.\n   *\n   * @private\n   */\n  emitClose () {\n    this.readyState = WebSocket.CLOSED;\n\n    this.emit('close', this._closeCode, this._closeMessage);\n\n    if (this.extensions[PerMessageDeflate.extensionName]) {\n      this.extensions[PerMessageDeflate.extensionName].cleanup();\n    }\n\n    this.extensions = null;\n\n    this.removeAllListeners();\n  }\n\n  /**\n   * Pause the socket stream.\n   *\n   * @public\n   */\n  pause () {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.pause();\n  }\n\n  /**\n   * Resume the socket stream\n   *\n   * @public\n   */\n  resume () {\n    if (this.readyState !== WebSocket.OPEN) throw new Error('not opened');\n\n    this._socket.resume();\n  }\n\n  /**\n   * Start a closing handshake.\n   *\n   *            +----------+     +-----------+   +----------+\n   *     + - - -|ws.close()|---->|close frame|-->|ws.close()|- - - -\n   *            +----------+     +-----------+   +----------+       |\n   *     |      +----------+     +-----------+         |\n   *            |ws.close()|<----|close frame|<--------+            |\n   *            +----------+     +-----------+         |\n   *  CLOSING         |              +---+             |         CLOSING\n   *                  |          +---|fin|<------------+\n   *     |            |          |   +---+                          |\n   *                  |          |   +---+      +-------------+\n   *     |            +----------+-->|fin|----->|ws.finalize()| - - +\n   *                             |   +---+      +-------------+\n   *     |     +-------------+   |\n   *      - - -|ws.finalize()|<--+\n   *           +-------------+\n   *\n   * @param {Number} code Status code explaining why the connection is closing\n   * @param {String} data A string explaining why the connection is closing\n   * @public\n   */\n  close (code, data) {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n      this.finalize(new Error('closed before the connection is established'));\n      return;\n    }\n\n    if (this.readyState === WebSocket.CLOSING) {\n      if (this._closeFrameSent && this._closeFrameReceived) this._socket.end();\n      return;\n    }\n\n    this.readyState = WebSocket.CLOSING;\n    this._sender.close(code, data, !this._isServer, (err) => {\n      //\n      // This error is handled by the `'error'` listener on the socket. We only\n      // want to know if the close frame has been sent here.\n      //\n      if (err) return;\n\n      this._closeFrameSent = true;\n\n      if (!this._finalized) {\n        if (this._closeFrameReceived) this._socket.end();\n\n        //\n        // Ensure that the connection is cleaned up even when the closing\n        // handshake fails.\n        //\n        this._closeTimer = setTimeout(this._finalize, closeTimeout, true);\n      }\n    });\n  }\n\n  /**\n   * Send a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n  ping (data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.ping(data || constants.EMPTY_BUFFER, mask);\n  }\n\n  /**\n   * Send a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Indicates whether or not to mask `data`\n   * @param {Boolean} failSilently Indicates whether or not to throw if `readyState` isn't `OPEN`\n   * @public\n   */\n  pong (data, mask, failSilently) {\n    if (this.readyState !== WebSocket.OPEN) {\n      if (failSilently) return;\n      throw new Error('not opened');\n    }\n\n    if (typeof data === 'number') data = data.toString();\n    if (mask === undefined) mask = !this._isServer;\n    this._sender.pong(data || constants.EMPTY_BUFFER, mask);\n  }\n\n  /**\n   * Send a data message.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback which is executed when data is written out\n   * @public\n   */\n  send (data, options, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    if (this.readyState !== WebSocket.OPEN) {\n      if (cb) cb(new Error('not opened'));\n      else throw new Error('not opened');\n      return;\n    }\n\n    if (typeof data === 'number') data = data.toString();\n\n    const opts = Object.assign({\n      binary: typeof data !== 'string',\n      mask: !this._isServer,\n      compress: true,\n      fin: true\n    }, options);\n\n    if (!this.extensions[PerMessageDeflate.extensionName]) {\n      opts.compress = false;\n    }\n\n    this._sender.send(data || constants.EMPTY_BUFFER, opts, cb);\n  }\n\n  /**\n   * Forcibly close the connection.\n   *\n   * @public\n   */\n  terminate () {\n    if (this.readyState === WebSocket.CLOSED) return;\n    if (this.readyState === WebSocket.CONNECTING) {\n      this._req.abort();\n      this.finalize(new Error('closed before the connection is established'));\n      return;\n    }\n\n    this.finalize(true);\n  }\n}\n\nWebSocket.CONNECTING = 0;\nWebSocket.OPEN = 1;\nWebSocket.CLOSING = 2;\nWebSocket.CLOSED = 3;\n\n//\n// Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n// See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n//\n['open', 'error', 'close', 'message'].forEach((method) => {\n  Object.defineProperty(WebSocket.prototype, `on${method}`, {\n    /**\n     * Return the listener of the event.\n     *\n     * @return {(Function|undefined)} The event listener or `undefined`\n     * @public\n     */\n    get () {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        if (listeners[i]._listener) return listeners[i]._listener;\n      }\n    },\n    /**\n     * Add a listener for the event.\n     *\n     * @param {Function} listener The listener to add\n     * @public\n     */\n    set (listener) {\n      const listeners = this.listeners(method);\n      for (var i = 0; i < listeners.length; i++) {\n        //\n        // Remove only the listeners added via `addEventListener`.\n        //\n        if (listeners[i]._listener) this.removeListener(method, listeners[i]);\n      }\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\nWebSocket.prototype.addEventListener = EventTarget.addEventListener;\nWebSocket.prototype.removeEventListener = EventTarget.removeEventListener;\n\nmodule.exports = WebSocket;\n\n/**\n * Initialize a WebSocket server client.\n *\n * @param {http.IncomingMessage} req The request object\n * @param {net.Socket} socket The network socket between the server and client\n * @param {Buffer} head The first packet of the upgraded stream\n * @param {Object} options WebSocket attributes\n * @param {Number} options.protocolVersion The WebSocket protocol version\n * @param {Object} options.extensions The negotiated extensions\n * @param {Number} options.maxPayload The maximum allowed message size\n * @param {String} options.protocol The chosen subprotocol\n * @private\n */\nfunction initAsServerClient (socket, head, options) {\n  this.protocolVersion = options.protocolVersion;\n  this._maxPayload = options.maxPayload;\n  this.extensions = options.extensions;\n  this.protocol = options.protocol;\n\n  this._isServer = true;\n\n  this.setSocket(socket, head);\n}\n\n/**\n * Initialize a WebSocket client.\n *\n * @param {String} address The URL to which to connect\n * @param {String[]} protocols The list of subprotocols\n * @param {Object} options Connection options\n * @param {String} options.protocol Value of the `Sec-WebSocket-Protocol` header\n * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n * @param {Number} options.handshakeTimeout Timeout in milliseconds for the handshake request\n * @param {String} options.localAddress Local interface to bind for network connections\n * @param {Number} options.protocolVersion Value of the `Sec-WebSocket-Version` header\n * @param {Object} options.headers An object containing request headers\n * @param {String} options.origin Value of the `Origin` or `Sec-WebSocket-Origin` header\n * @param {http.Agent} options.agent Use the specified Agent\n * @param {String} options.host Value of the `Host` header\n * @param {Number} options.family IP address family to use during hostname lookup (4 or 6).\n * @param {Function} options.checkServerIdentity A function to validate the server hostname\n * @param {Boolean} options.rejectUnauthorized Verify or not the server certificate\n * @param {String} options.passphrase The passphrase for the private key or pfx\n * @param {String} options.ciphers The ciphers to use or exclude\n * @param {String} options.ecdhCurve The curves for ECDH key agreement to use or exclude\n * @param {(String|String[]|Buffer|Buffer[])} options.cert The certificate key\n * @param {(String|String[]|Buffer|Buffer[])} options.key The private key\n * @param {(String|Buffer)} options.pfx The private key, certificate, and CA certs\n * @param {(String|String[]|Buffer|Buffer[])} options.ca Trusted certificates\n * @private\n */\nfunction initAsClient (address, protocols, options) {\n  options = Object.assign({\n    protocolVersion: protocolVersions[1],\n    protocol: protocols.join(','),\n    perMessageDeflate: true,\n    handshakeTimeout: null,\n    localAddress: null,\n    headers: null,\n    family: null,\n    origin: null,\n    agent: null,\n    host: null,\n\n    //\n    // SSL options.\n    //\n    checkServerIdentity: null,\n    rejectUnauthorized: null,\n    passphrase: null,\n    ciphers: null,\n    ecdhCurve: null,\n    cert: null,\n    key: null,\n    pfx: null,\n    ca: null\n  }, options);\n\n  if (protocolVersions.indexOf(options.protocolVersion) === -1) {\n    throw new Error(\n      `unsupported protocol version: ${options.protocolVersion} ` +\n      `(supported versions: ${protocolVersions.join(', ')})`\n    );\n  }\n\n  this.protocolVersion = options.protocolVersion;\n  this._isServer = false;\n  this.url = address;\n\n  const serverUrl = url.parse(address);\n  const isUnixSocket = serverUrl.protocol === 'ws+unix:';\n\n  if (!serverUrl.host && (!isUnixSocket || !serverUrl.path)) {\n    throw new Error('invalid url');\n  }\n\n  const isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';\n  const key = crypto.randomBytes(16).toString('base64');\n  const httpObj = isSecure ? https : http;\n  var perMessageDeflate;\n\n  const requestOptions = {\n    port: serverUrl.port || (isSecure ? 443 : 80),\n    host: serverUrl.hostname,\n    path: '/',\n    headers: {\n      'Sec-WebSocket-Version': options.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket'\n    }\n  };\n\n  if (options.headers) Object.assign(requestOptions.headers, options.headers);\n  if (options.perMessageDeflate) {\n    perMessageDeflate = new PerMessageDeflate(\n      options.perMessageDeflate !== true ? options.perMessageDeflate : {},\n      false\n    );\n    requestOptions.headers['Sec-WebSocket-Extensions'] = Extensions.format({\n      [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n    });\n  }\n  if (options.protocol) {\n    requestOptions.headers['Sec-WebSocket-Protocol'] = options.protocol;\n  }\n  if (options.origin) {\n    if (options.protocolVersion < 13) {\n      requestOptions.headers['Sec-WebSocket-Origin'] = options.origin;\n    } else {\n      requestOptions.headers.Origin = options.origin;\n    }\n  }\n  if (options.host) requestOptions.headers.Host = options.host;\n  if (serverUrl.auth) requestOptions.auth = serverUrl.auth;\n\n  if (options.localAddress) requestOptions.localAddress = options.localAddress;\n  if (options.family) requestOptions.family = options.family;\n\n  if (isUnixSocket) {\n    const parts = serverUrl.path.split(':');\n\n    requestOptions.socketPath = parts[0];\n    requestOptions.path = parts[1];\n  } else if (serverUrl.path) {\n    //\n    // Make sure that path starts with `/`.\n    //\n    if (serverUrl.path.charAt(0) !== '/') {\n      requestOptions.path = `/${serverUrl.path}`;\n    } else {\n      requestOptions.path = serverUrl.path;\n    }\n  }\n\n  var agent = options.agent;\n\n  //\n  // A custom agent is required for these options.\n  //\n  if (\n    options.rejectUnauthorized != null ||\n    options.checkServerIdentity ||\n    options.passphrase ||\n    options.ciphers ||\n    options.ecdhCurve ||\n    options.cert ||\n    options.key ||\n    options.pfx ||\n    options.ca\n  ) {\n    if (options.passphrase) requestOptions.passphrase = options.passphrase;\n    if (options.ciphers) requestOptions.ciphers = options.ciphers;\n    if (options.ecdhCurve) requestOptions.ecdhCurve = options.ecdhCurve;\n    if (options.cert) requestOptions.cert = options.cert;\n    if (options.key) requestOptions.key = options.key;\n    if (options.pfx) requestOptions.pfx = options.pfx;\n    if (options.ca) requestOptions.ca = options.ca;\n    if (options.checkServerIdentity) {\n      requestOptions.checkServerIdentity = options.checkServerIdentity;\n    }\n    if (options.rejectUnauthorized != null) {\n      requestOptions.rejectUnauthorized = options.rejectUnauthorized;\n    }\n\n    if (!agent) agent = new httpObj.Agent(requestOptions);\n  }\n\n  if (agent) requestOptions.agent = agent;\n\n  this._req = httpObj.get(requestOptions);\n\n  if (options.handshakeTimeout) {\n    this._req.setTimeout(options.handshakeTimeout, () => {\n      this._req.abort();\n      this.finalize(new Error('opening handshake has timed out'));\n    });\n  }\n\n  this._req.on('error', (error) => {\n    if (this._req.aborted) return;\n\n    this._req = null;\n    this.finalize(error);\n  });\n\n  this._req.on('response', (res) => {\n    if (!this.emit('unexpected-response', this._req, res)) {\n      this._req.abort();\n      this.finalize(new Error(`unexpected server response (${res.statusCode})`));\n    }\n  });\n\n  this._req.on('upgrade', (res, socket, head) => {\n    this.emit('headers', res.headers, res);\n\n    //\n    // The user may have closed the connection from a listener of the `headers`\n    // event.\n    //\n    if (this.readyState !== WebSocket.CONNECTING) return;\n\n    this._req = null;\n\n    const digest = crypto.createHash('sha1')\n      .update(key + constants.GUID, 'binary')\n      .digest('base64');\n\n    if (res.headers['sec-websocket-accept'] !== digest) {\n      socket.destroy();\n      return this.finalize(new Error('invalid server key'));\n    }\n\n    const serverProt = res.headers['sec-websocket-protocol'];\n    const protList = (options.protocol || '').split(/, */);\n    var protError;\n\n    if (!options.protocol && serverProt) {\n      protError = 'server sent a subprotocol even though none requested';\n    } else if (options.protocol && !serverProt) {\n      protError = 'server sent no subprotocol even though requested';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n      protError = 'server responded with an invalid protocol';\n    }\n\n    if (protError) {\n      socket.destroy();\n      return this.finalize(new Error(protError));\n    }\n\n    if (serverProt) this.protocol = serverProt;\n\n    if (perMessageDeflate) {\n      try {\n        const serverExtensions = Extensions.parse(\n          res.headers['sec-websocket-extensions']\n        );\n\n        if (serverExtensions[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(\n            serverExtensions[PerMessageDeflate.extensionName]\n          );\n          this.extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        socket.destroy();\n        this.finalize(new Error('invalid Sec-WebSocket-Extensions header'));\n        return;\n      }\n    }\n\n    this.setSocket(socket, head);\n  });\n}\n"]},"metadata":{},"sourceType":"script"}