{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/TopBar.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport priceStore from \"./Store/Price\";\n\nconst TopBar = () => {\n  const _useState = useState(priceStore.getState()[\"BTCUSDT\"]),\n        _useState2 = _slicedToArray(_useState, 2),\n        btcPrice = _useState2[0],\n        setBtcPrice = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isBuy = _useState4[0],\n        setIsBuy = _useState4[1];\n\n  useEffect(() => {\n    priceStore.subscribe(() => {\n      setBtcPrice(prevBtcPrice => {\n        const newBtcPrice = priceStore.getState()[\"BTCUSDT\"];\n        setIsBuy(newBtcPrice > prevBtcPrice);\n        return newBtcPrice;\n      });\n    });\n  }, []);\n  const priceColour = isBuy ? \"#26A83A\" : \"red\";\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(SearchForCoin, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    id: \"top_bar_text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Want access to more data? Sign up for free!\"), React.createElement(\"p\", {\n    id: \"btcPriceFeed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"BTCUSDT: \", React.createElement(\"b\", {\n    style: {\n      color: priceColour\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"$\", btcPrice)));\n};\n\nconst coins = [{\n  name: \"Ethereum\",\n  symbol: \"ETH\"\n}];\n\nconst SearchForCoin = () => {\n  const _useState5 = useState(\"\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        searchValue = _useState6[0],\n        setSearchValue = _useState6[1];\n\n  const handleSearchChange = event => {\n    setSearchValue(event.target.value);\n  };\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        predictions = _useState8[0],\n        setPredictions = _useState8[1];\n\n  useEffect(() => {\n    setPredictions([]);\n    const lowerCaseSearchValue = searchValue.toLowerCase();\n\n    for (const coin of coins) {\n      if ((coin.name.toLowerCase().includes(lowerCaseSearchValue) || coin.symbol.toLowerCase().includes(lowerCaseSearchValue)) && predictions.length < 5 && searchValue !== \"\") {\n        setPredictions(predictions => {\n          predictions.push(coin);\n          return predictions;\n        });\n      }\n    }\n  }, [searchValue]);\n  const predictionElements = predictions.map(prediction => React.createElement(\"div\", {\n    className: \"search_prediction\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, prediction.name, \" (\", prediction.symbol, \")\"));\n\n  const _useState9 = useState(\"0px\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        predictionStyleWidth = _useState10[0],\n        setPredictionStyleWidth = _useState10[1];\n\n  useEffect(() => {\n    // on mount initialise the width to be the same as the input search\n    const width = document.getElementById(\"search_for_coin_input\").getBoundingClientRect().width + \"px\";\n    setPredictionStyleWidth(width);\n  }, []);\n  const predictionStyle = {\n    width: predictionStyleWidth,\n    position: \"fixed\",\n    border: \"1px solid #D8D8D8\",\n    borderRadius: \"10px\",\n    textAlign: \"left\",\n    zIndex: 20,\n    overflow: \"hidden\",\n    backgroundColor: \"white\"\n  };\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"search_for_coin_input\",\n    placeholder: \"Search for coin\",\n    value: searchValue,\n    onChange: handleSearchChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), predictions.length > 0 && React.createElement(\"div\", {\n    style: predictionStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, predictionElements)));\n};\n\nexport default TopBar;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/TopBar.js"],"names":["React","useContext","useEffect","useState","priceStore","TopBar","getState","btcPrice","setBtcPrice","isBuy","setIsBuy","subscribe","prevBtcPrice","newBtcPrice","priceColour","color","coins","name","symbol","SearchForCoin","searchValue","setSearchValue","handleSearchChange","event","target","value","predictions","setPredictions","lowerCaseSearchValue","toLowerCase","coin","includes","length","push","predictionElements","map","prediction","predictionStyleWidth","setPredictionStyleWidth","width","document","getElementById","getBoundingClientRect","predictionStyle","position","border","borderRadius","textAlign","zIndex","overflow","backgroundColor"],"mappings":"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","sourcesContent":["import React, {useContext, useEffect, useState} from \"react\";\nimport priceStore from \"./Store/Price\";\n\n\nconst TopBar = () => {\n    const [btcPrice, setBtcPrice] = useState(priceStore.getState()[\"BTCUSDT\"]);\n    const [isBuy, setIsBuy] = useState(true);\n\n    useEffect(() => {\n        priceStore.subscribe(() => {\n            setBtcPrice(prevBtcPrice => {\n                const newBtcPrice = priceStore.getState()[\"BTCUSDT\"];\n                setIsBuy(newBtcPrice > prevBtcPrice);\n                return newBtcPrice;\n            });\n        });\n    }, []);\n\n    const priceColour = isBuy ? \"#26A83A\" : \"red\";\n    return (\n        <React.Fragment>\n            <SearchForCoin/>\n            <p id=\"top_bar_text\">Want access to more data? Sign up for free!</p>\n            <p id={\"btcPriceFeed\"}>BTCUSDT: <b style={{color: priceColour}}>${btcPrice}</b></p>\n        </React.Fragment>\n    );\n};\n\nconst coins = [\n    {\n        name: \"Ethereum\",\n        symbol: \"ETH\",\n    }\n];\n\nconst SearchForCoin = () => {\n    const [searchValue, setSearchValue] = useState(\"\");\n\n    const handleSearchChange = event => {\n        setSearchValue(event.target.value);\n    };\n\n    const [predictions, setPredictions] = useState([]);\n    useEffect(() => {\n        setPredictions([]);\n        const lowerCaseSearchValue = searchValue.toLowerCase();\n        for (const coin of coins) {\n            if ((coin.name.toLowerCase().includes(lowerCaseSearchValue) || coin.symbol.toLowerCase().includes(lowerCaseSearchValue))\n                    && predictions.length < 5 && searchValue !== \"\") {\n                setPredictions(predictions => {\n                    predictions.push(coin);\n                    return predictions;\n                });\n            }\n        }\n    }, [searchValue]);\n\n    const predictionElements = predictions.map(prediction =>\n        <div className={\"search_prediction\"}>\n            {prediction.name} ({prediction.symbol})\n        </div>\n    )\n\n    const [predictionStyleWidth, setPredictionStyleWidth] = useState(\"0px\");\n    useEffect(() => { // on mount initialise the width to be the same as the input search\n        const width = document.getElementById(\"search_for_coin_input\").getBoundingClientRect().width + \"px\";\n        setPredictionStyleWidth(width);\n    }, []);\n\n    const predictionStyle = {\n        width: predictionStyleWidth,\n        position: \"fixed\",\n        border: \"1px solid #D8D8D8\",\n        borderRadius: \"10px\",\n        textAlign: \"left\",\n        zIndex: 20,\n        overflow: \"hidden\",\n        backgroundColor: \"white\"\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <input id=\"search_for_coin_input\" placeholder=\"Search for coin\"\n                       value={searchValue} onChange={handleSearchChange}/>\n                {predictions.length > 0 &&\n                    <div style={predictionStyle}>\n                        {predictionElements}\n                    </div>}\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default TopBar;"]},"metadata":{},"sourceType":"module"}