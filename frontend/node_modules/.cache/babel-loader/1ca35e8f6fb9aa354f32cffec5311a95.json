{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext, useState, createContext } from \"react\";\nimport io from \"socket.io-client\";\nimport settingsStore from \"../Store/Settings\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data);\n  const LIMIT = 500;\n\n  if (state[action.type].length > LIMIT) {\n    state[action.type].shift();\n  } // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = createContext();\nconst TimeContext = createContext(Date.now());\nconst settingsContext = createContext(settingsStore.getState());\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const _useState = useState(Date.now()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"]; // Initialise the anomalies state\n\n  useEffect(() => {\n    //Hit the cache api and set the initial state\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies\n    //On new anomaly, determine the type then push to the anomalies state\n\n    const socket = io(\"localhost:8080\");\n    socket.on(\"NEW_ANOMALY\", anomaly => {\n      dispatchAnomalies({\n        type: anomaly.group,\n        data: [anomaly]\n      });\n    });\n  }, []); // Start setNow interval\n\n  useEffect(() => {\n    const threadId = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(threadId);\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(TimeContext.Provider, {\n    value: now,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, dataDivs)));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Need to subscribe to the settings store in here\n\n  useEffect(() => {\n    settingsStore.subscribe(() => {\n      settingsStore.getState();\n    });\n  }, []); // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, //Anomalies are organised with oldest -> newest (needs to be reversed)\n  relevantAnomalies.reverse()));\n};\n\nconst ParsedText = ({\n  anomaly,\n  dataType\n}) => {\n  let element = \"\";\n  const NOW = useContext(TimeContext);\n  const timePassed = NOW - anomaly.data.timestamp * 1000;\n  const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\" : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\" : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n  const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n  const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n  switch (anomaly.type) {\n    case \"volumeAnomaly\":\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, anomaly.data.total + \" \", \" BTC worth of \", anomaly.coin + \" \", \"was \", anomaly.data.isBuyVolume ? \"bought \" : \"sold \", \" on \", anomaly.exchange + \" \", \"in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \", \" higher than the 200 hourly average.\", movingTimeString);\n      break;\n\n    case \"anomalyPriceRange\":\n      console.log(anomaly);\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, anomaly.coin, \" just \", anomaly.data.positive ? \"pumped \" : \"dumped \", (anomaly.data.change * 100).toFixed(2), \"% in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\", \" higher than the 200 hourly average\", \" \" + movingTimeString);\n      break;\n\n    case \"OrderBookIncrease\":\n      element = React.createElement(\"p\", {\n        className: `${dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"$\", anomaly.data.total, \" \", anomaly.data.isBuySide ? \"buy \" : \"sell\", \" wall for \", anomaly.coin + \" \", \"appeared \", movingTimeString, \" on \", anomaly.exchange, \" - A \", ((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2), \"% increase from the 200 hourly average\");\n      break;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, element, React.createElement(\"p\", {\n    className: \"data_timestamp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, new Date(anomaly.data.timestamp * 1000).toGMTString()));\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","createContext","io","settingsStore","anomaliesReducer","state","action","type","push","data","LIMIT","length","shift","JSON","parse","stringify","AnomaliesContext","TimeContext","Date","now","settingsContext","getState","DataDisplay","initialState","anomalies","dispatchAnomalies","setNow","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","socket","on","anomaly","group","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","subscribe","relevantAnomalies","slice","toUpperCase","reverse","ParsedText","element","NOW","timePassed","timestamp","movingTimeString","Math","floor","anomalyTimeRange","limitTimestamp","anomalyTimeRangeString","total","coin","isBuyVolume","exchange","hourlyMa200","toFixed","console","log","positive","change","range","maRange","isBuySide","buySide","maTotal","toGMTString"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState, createContext} from \"react\";\nimport io from \"socket.io-client\";\nimport settingsStore from \"../Store/Settings\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    const LIMIT = 500;\n    if (state[action.type].length > LIMIT) {\n        state[action.type].shift();\n    }\n\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = createContext();\nconst TimeContext = createContext(Date.now());\nconst settingsContext = createContext(settingsStore.getState());\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    // Initialise the anomalies state\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies\n        //On new anomaly, determine the type then push to the anomalies state\n        const socket = io(\"localhost:8080\");\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            dispatchAnomalies({type: anomaly.group, data: [anomaly]});\n        });\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <TimeContext.Provider value={now}>\n                <AnomaliesContext.Provider value={anomalies}>\n                    {dataDivs}\n                </AnomaliesContext.Provider>\n            </TimeContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Need to subscribe to the settings store in here\n    useEffect(() => {\n        settingsStore.subscribe(() => {\n           settingsStore.getState();\n        });\n    },[]);\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`} key={index}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                { //Anomalies are organised with oldest -> newest (needs to be reversed)\n                  relevantAnomalies.reverse() }\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = ({anomaly, dataType}) => {\n    let element = \"\";\n    const NOW = useContext(TimeContext);\n    const timePassed = NOW - anomaly.data.timestamp * 1000;\n    const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\"\n                                                    : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\"\n                                                    : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n\n    const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n    switch (anomaly.type) {\n        case \"volumeAnomaly\":\n            element = <p className={`${dataType}_text`}>\n                            {anomaly.data.total + \" \"} BTC worth of {anomaly.coin + \" \"}\n                            was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"} on {anomaly.exchange + \" \"}\n                            in the past {anomalyTimeRangeString} -\n                            {\" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \"} higher than the 200 hourly average.\n                            {movingTimeString}\n                        </p>;\n            break;\n        case \"anomalyPriceRange\":\n            console.log(anomaly);\n            element = <p className={`${dataType}_text`}>\n                        {anomaly.coin} just {anomaly.data.positive ? \"pumped \" : \"dumped \"}\n                        {(anomaly.data.change * 100).toFixed(2)}%\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\"} higher than the 200 hourly average\n                        {\" \" + movingTimeString}\n                    </p>\n            break;\n\n        case \"OrderBookIncrease\":\n            element = <p className={`${dataType}_text`}>\n                        ${anomaly.data.total} {anomaly.data.isBuySide ? \"buy \" : \"sell\"} wall for {anomaly.coin + \" \"}\n                        appeared {movingTimeString} on {anomaly.exchange} - A {((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2)}% increase\n                        from the 200 hourly average\n                    </p>\n            break;\n    }\n\n    return (\n        <React.Fragment>\n            {element}\n            <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}