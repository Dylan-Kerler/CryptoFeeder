{"ast":null,"code":"import _slicedToArray from\"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import React,{useEffect,useReducer,useContext,useState,createContext}from\"react\";import socket from\"../Socket\";import settingsStore from\"../Store/Settings\";import priceStore from\"../Store/Price\";import{AnomaliesContext,TimeContext,SettingsContext,PriceContext}from\"./Contexts\";import ParsedText from\"./ParsedText\";var anomaliesReducer=function anomaliesReducer(state,action){var _state$action$type;(_state$action$type=state[action.type]).push.apply(_state$action$type,_toConsumableArray(action.data));var LIMIT=500;if(state[action.type].length>LIMIT){state[action.type].shift();}// Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\nreturn JSON.parse(JSON.stringify(state));};var DataDisplay=function DataDisplay(){var initialState={\"volume\":[],\"price\":[],\"liquidity\":[]};var _useReducer=useReducer(anomaliesReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),anomalies=_useReducer2[0],dispatchAnomalies=_useReducer2[1];var _useState=useState(Date.now()),_useState2=_slicedToArray(_useState,2),now=_useState2[0],setNow=_useState2[1];var _useState3=useState(settingsStore.getState()),_useState4=_slicedToArray(_useState3,2),settings=_useState4[0],setSettings=_useState4[1];var _useState5=useState(priceStore.getState()[\"BTCUSDT\"]),_useState6=_slicedToArray(_useState5,2),price=_useState6[0],setPrice=_useState6[1];var dataTypes=[\"volume\",\"price\",\"liquidity\"];// Initialise the anomalies\nuseEffect(function(){//Hit the cache api and set the initial state\nfetch(\"http://localhost:8080/api/little_cache\").then(function(res){return res.json().then(function(recentEventCache){Object.keys(recentEventCache).forEach(function(key){if(dataTypes.includes(key)){dispatchAnomalies({type:key,data:recentEventCache[key]});}});});});//Subscribe to anomalies to push to anomalies state\nsocket.on(\"NEW_ANOMALY\",function(anomaly){dispatchAnomalies({type:anomaly.group,data:[anomaly]});});},[]);// Subscribe to stores\nuseEffect(function(){var settingStoreUnsubscribe=settingsStore.subscribe(function(){setSettings(settingsStore.getState());});var priceStoreUnsubscribe=priceStore.subscribe(function(){setPrice(priceStore.getState()[\"BTCUSDT\"]);});return function(){settingStoreUnsubscribe();priceStoreUnsubscribe();};},[]);// Start setNow interval\nuseEffect(function(){var threadId=setInterval(function(){setNow(Date.now());},1000);return function(){return clearInterval(threadId);};},[]);var dataDivs=dataTypes.map(function(type,index){return React.createElement(DataDiv,{dataType:type,key:index});});return React.createElement(React.Fragment,null,React.createElement(SettingsContext.Provider,{value:settings},React.createElement(PriceContext.Provider,{value:price},React.createElement(TimeContext.Provider,{value:now},React.createElement(AnomaliesContext.Provider,{value:anomalies},dataDivs)))));};var DataDiv=function DataDiv(props){var anomalies=useContext(AnomaliesContext);var dataType=props.dataType;// Loop through all anomalies of that type and parse the anomaly into text\nvar relevantAnomalies=anomalies[props.dataType].map(function(anomaly,index){return React.createElement(ParsedText,{dataType:dataType,anomaly:anomaly,key:index});});return React.createElement(\"div\",{id:\"\".concat(dataType,\"_data_div\")},React.createElement(\"h1\",null,\"\".concat(dataType.slice(0,1).toUpperCase()).concat(dataType.slice(1))),React.createElement(\"div\",null,//Anomalies are organised with oldest -> newest (needs to be reversed)\nrelevantAnomalies.reverse()));};export default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","createContext","socket","settingsStore","priceStore","AnomaliesContext","TimeContext","SettingsContext","PriceContext","ParsedText","anomaliesReducer","state","action","type","push","data","LIMIT","length","shift","JSON","parse","stringify","DataDisplay","initialState","anomalies","dispatchAnomalies","Date","now","setNow","getState","settings","setSettings","price","setPrice","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","on","anomaly","group","settingStoreUnsubscribe","subscribe","priceStoreUnsubscribe","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","slice","toUpperCase","reverse"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState, createContext} from \"react\";\nimport socket from \"../Socket\";\nimport settingsStore from \"../Store/Settings\";\nimport priceStore from \"../Store/Price\";\nimport {AnomaliesContext, TimeContext, SettingsContext, PriceContext} from \"./Contexts\";\nimport ParsedText from \"./ParsedText\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    const LIMIT = 500;\n    if (state[action.type].length > LIMIT) {\n        state[action.type].shift();\n    }\n\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const [settings, setSettings] = useState(settingsStore.getState());\n    const [price, setPrice] = useState(priceStore.getState()[\"BTCUSDT\"]);\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n\n    // Initialise the anomalies\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies to push to anomalies state\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            dispatchAnomalies({type: anomaly.group, data: [anomaly]});\n        });\n    }, []);\n\n    // Subscribe to stores\n    useEffect(() => {\n        const settingStoreUnsubscribe = settingsStore.subscribe(() => {\n            setSettings(settingsStore.getState());\n        });\n\n        const priceStoreUnsubscribe = priceStore.subscribe(() => {\n            setPrice(priceStore.getState()[\"BTCUSDT\"]);\n        });\n\n        return () => {\n            settingStoreUnsubscribe();\n            priceStoreUnsubscribe();\n        }\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <SettingsContext.Provider value={settings}>\n                <PriceContext.Provider value={price}>\n                    <TimeContext.Provider value={now}>\n                        <AnomaliesContext.Provider value={anomalies}>\n                            {dataDivs}\n                        </AnomaliesContext.Provider>\n                    </TimeContext.Provider>\n                </PriceContext.Provider>\n            </SettingsContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <ParsedText dataType={dataType} anomaly={anomaly} key={index}/>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                { //Anomalies are organised with oldest -> newest (needs to be reversed)\n                  relevantAnomalies.reverse() }\n            </div>\n        </div>\n    )\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}