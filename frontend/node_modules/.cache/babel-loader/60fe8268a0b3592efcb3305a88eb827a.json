{"ast":null,"code":"var _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/ParsedText.js\";\nimport React, { useContext } from \"react\";\nimport { PriceContext, SettingsContext, TimeContext } from \"./Contexts\";\n\nconst ParsedText = ({\n  anomaly,\n  dataType\n}) => {\n  let element = \"\";\n  const settings = useContext(SettingsContext);\n  const price = useContext(PriceContext);\n  const timePassed = useContext(TimeContext) - anomaly.data.timestamp * 1000;\n  const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\" : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\" : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n  const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n  const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n  if (anomaly.coin === settings.coin || settings.coin === \"all\") {\n    switch (anomaly.type) {\n      case \"volumeAnomaly\":\n        if (anomaly.data.total * price >= settings.minVolume) {\n          element = React.createElement(\"p\", {\n            className: `${dataType}_text`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 20\n            },\n            __self: this\n          }, \"$\", Intl.NumberFormat().format((anomaly.data.total * price).toFixed(2)) + \" \", \" worth of \", anomaly.coin + \" \", \"was \", anomaly.data.isBuyVolume ? \"bought \" : \"sold \", \" on \", anomaly.exchange + \" \", \"in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \", \" higher than the 200 hourly average.\", movingTimeString);\n        }\n\n        break;\n\n      case \"anomalyPriceRange\":\n        if (anomaly.data.change * 100 >= settings.minPriceIncrease) {\n          element = React.createElement(\"p\", {\n            className: `${dataType}_text`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 31\n            },\n            __self: this\n          }, anomaly.coin, \" just \", anomaly.data.positive ? \"pumped \" : \"dumped \", (anomaly.data.change * 100).toFixed(2), \"% in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\", \" higher than the 200 hourly average\", \" \" + movingTimeString);\n        }\n\n        break;\n\n      case \"OrderBookIncrease\":\n        console.log(anomaly);\n\n        if (anomaly.data.total >= settings.minOrderSize) {\n          element = React.createElement(\"p\", {\n            className: `${dataType}_text`,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44\n            },\n            __self: this\n          }, \"$\", Intl.NumberFormat().format(anomaly.data.total), \" \", anomaly.data.isBuySide ? \"buy \" : \"sell\", \" wall for \", anomaly.coin + \" \", \"appeared \", movingTimeString, \" on \", anomaly.exchange, \" - A \", ((anomaly.data.total / anomaly.data.maTotal - 1) * 100).toFixed(2), \"% increase from the 200 hourly average\");\n        }\n\n        break;\n    }\n  }\n\n  let enterClassName = \"enter_sell_data\";\n\n  if (anomaly.data.isBuySide || anomaly.data.isBuyVolume || anomaly.data.positive) {\n    enterClassName = \"enter_buy_data\";\n  }\n\n  return (() => element ? React.createElement(\"div\", {\n    id: `${dataType}_data_1`,\n    className: `data_box ${dataType}_box ${enterClassName}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, element, React.createElement(\"p\", {\n    className: \"data_timestamp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, new Date(anomaly.data.timestamp * 1000).toGMTString())) : React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }))();\n};\n\nexport default ParsedText;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/ParsedText.js"],"names":["React","useContext","PriceContext","SettingsContext","TimeContext","ParsedText","anomaly","dataType","element","settings","price","timePassed","data","timestamp","movingTimeString","Math","floor","anomalyTimeRange","limitTimestamp","anomalyTimeRangeString","coin","type","total","minVolume","Intl","NumberFormat","format","toFixed","isBuyVolume","exchange","hourlyMa200","change","minPriceIncrease","positive","range","maRange","console","log","minOrderSize","isBuySide","maTotal","enterClassName","Date","toGMTString"],"mappings":"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","sourcesContent":["import React, {useContext} from \"react\";\nimport {PriceContext, SettingsContext, TimeContext} from \"./Contexts\";\n\nconst ParsedText = ({anomaly, dataType}) => {\n    let element = \"\";\n    const settings = useContext(SettingsContext);\n    const price = useContext(PriceContext);\n    const timePassed = useContext(TimeContext) - anomaly.data.timestamp * 1000;\n    const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\"\n        : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\"\n        : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n\n    const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n    if (anomaly.coin === settings.coin || settings.coin === \"all\") {\n        switch (anomaly.type) {\n            case \"volumeAnomaly\":\n                if (anomaly.data.total * price >= settings.minVolume) {\n                    element = <p className={`${dataType}_text`}>\n                        ${Intl.NumberFormat().format((anomaly.data.total * price).toFixed(2)) + \" \"} worth of {anomaly.coin + \" \"}\n                        was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"} on {anomaly.exchange + \" \"}\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \"} higher than the 200 hourly average.\n                        {movingTimeString}\n                    </p>;\n                }\n                break;\n            case \"anomalyPriceRange\":\n                if (anomaly.data.change * 100 >= settings.minPriceIncrease) {\n                    element = <p className={`${dataType}_text`}>\n                        {anomaly.coin} just {anomaly.data.positive ? \"pumped \" : \"dumped \"}\n                        {(anomaly.data.change * 100).toFixed(2)}%\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\"} higher than the 200 hourly average\n                        {\" \" + movingTimeString}\n                    </p>\n                }\n                break;\n\n            case \"OrderBookIncrease\":\n                console.log(anomaly)\n                if (anomaly.data.total >= settings.minOrderSize) {\n                    element = <p className={`${dataType}_text`}>\n                        ${Intl.NumberFormat().format(anomaly.data.total)} {anomaly.data.isBuySide ? \"buy \" : \"sell\"} wall for {anomaly.coin + \" \"}\n                        appeared {movingTimeString} on {anomaly.exchange} - A {((anomaly.data.total / anomaly.data.maTotal - 1) * 100).toFixed(2)}% increase\n                        from the 200 hourly average\n                    </p>\n                }\n                break;\n        }\n    }\n\n    let enterClassName = \"enter_sell_data\";\n    if (anomaly.data.isBuySide || anomaly.data.isBuyVolume || anomaly.data.positive) {\n        enterClassName = \"enter_buy_data\";\n    }\n\n    return (\n        (() =>\n                element ?\n                    <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box ${enterClassName}`}>\n                        {element}\n                        <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n                    </div>\n                    :\n                    <React.Fragment/>\n        )()\n    );\n};\n\nexport default ParsedText;"]},"metadata":{},"sourceType":"module"}