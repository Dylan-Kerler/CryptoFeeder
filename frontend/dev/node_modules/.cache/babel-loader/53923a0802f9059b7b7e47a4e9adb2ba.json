{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext, useState } from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data); // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\nconst TimeContext = React.createContext(Date.now());\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const _useState = useState(Date.now()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n  useEffect(() => {\n    //Hit the cache api and set the initial state with dispatchAnomalies\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies\n    //On new anomaly, determine the type then push to the anomalies state\n  }, []);\n  useEffect(() => {\n    const threadId = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => {\n      clearInterval(threadId);\n    };\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(TimeContext.Provider, {\n    value: now,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, dataDivs)));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, //Anomalies are organised with oldest -> newest (needs to be reversed)\n  relevantAnomalies.reverse()));\n};\n\nconst ParsedText = props => {\n  let element;\n  const anomaly = props.anomaly;\n  const NOW = useContext(TimeContext);\n  const timePassed = NOW - anomaly.data.timestamp * 1000;\n  const movingTimeString = timePassed > 120 * 1000 ? Math.floor(timePassed / 1000 / 60) + \" minutes \" : Math.floor(timePassed / 1000) + \" seconds \";\n  const staticTimePassed = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n  const staticTimeString = staticTimePassed > 120 * 1000 ? Math.floor(staticTimePassed / 1000 / 60) + \" minutes \" : Math.floor(staticTimePassed / 1000) + \" seconds \";\n\n  switch (anomaly.type) {\n    case \"volumeAnomaly\":\n      element = React.createElement(\"p\", {\n        className: `${props.dataType}_text`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"$\", anomaly.data.total + \" \"), \"was \", anomaly.data.isBuyVolume ? \"bought \" : \"sold \", \"in the last \", staticTimeString, \" -\", \" \" + (anomaly.data.total / anomaly.data.hourlyMa200 * 100).toFixed(2) + \"% \", \" higher than the 200 hourly average\");\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, element, React.createElement(\"p\", {\n    className: \"data_timestamp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, new Date(anomaly.data.timestamp * 1000).toGMTString()));\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","anomaliesReducer","state","action","type","push","data","JSON","parse","stringify","AnomaliesContext","createContext","TimeContext","Date","now","DataDisplay","initialState","anomalies","dispatchAnomalies","setNow","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","anomaly","slice","toUpperCase","reverse","ParsedText","element","NOW","timePassed","timestamp","movingTimeString","Math","floor","staticTimePassed","limitTimestamp","staticTimeString","total","isBuyVolume","hourlyMa200","toFixed","toGMTString"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState} from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\nconst TimeContext = React.createContext(Date.now());\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    useEffect(() => {\n        //Hit the cache api and set the initial state with dispatchAnomalies\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies\n        //On new anomaly, determine the type then push to the anomalies state\n    }, []);\n\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n\n        return () => {\n            clearInterval(threadId);\n        };\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <TimeContext.Provider value={now}>\n                <AnomaliesContext.Provider value={anomalies}>\n                    {dataDivs}\n                </AnomaliesContext.Provider>\n            </TimeContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`} key={index}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                {\n                    //Anomalies are organised with oldest -> newest (needs to be reversed)\n                    relevantAnomalies.reverse()\n                }\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = props => {\n    let element;\n    const anomaly = props.anomaly;\n    const NOW = useContext(TimeContext);\n    const timePassed = NOW - anomaly.data.timestamp * 1000;\n    const movingTimeString = timePassed > 120 * 1000 ? Math.floor(timePassed / 1000 / 60) + \" minutes \"\n                                               : Math.floor(timePassed / 1000) + \" seconds \";\n\n    const staticTimePassed = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const staticTimeString = staticTimePassed > 120 * 1000 ? Math.floor(staticTimePassed / 1000 / 60) + \" minutes \"\n                                                           : Math.floor(staticTimePassed / 1000) + \" seconds \";\n    switch (anomaly.type) {\n        case \"volumeAnomaly\":\n            element = <p className={`${props.dataType}_text`}>\n                            <strong>${anomaly.data.total + \" \"}</strong>\n                            was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"}\n                            in the last {staticTimeString} -\n                            {\" \" + (anomaly.data.total / anomaly.data.hourlyMa200 * 100).toFixed(2) + \"% \"} higher than the 200 hourly average\n                    </p>\n    }\n\n    return (\n        <React.Fragment>\n            {element}\n            <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}