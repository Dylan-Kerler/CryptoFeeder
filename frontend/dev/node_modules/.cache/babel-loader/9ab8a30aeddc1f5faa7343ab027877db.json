{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst crypto = require('crypto');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\n\nconst bufferUtil = require('./BufferUtil');\n\nconst ErrorCodes = require('./ErrorCodes');\n\nconst constants = require('./Constants');\n\nconst Buffer = safeBuffer.Buffer;\n/**\n * HyBi Sender implementation.\n */\n\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */\n  constructor(socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n    this._firstFragment = true;\n    this._compress = false;\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n\n\n  static frame(data, options) {\n    const merge = data.length < 1024 || options.mask && options.readOnly;\n    var offset = options.mask ? 6 : 2;\n    var payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2, true);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2, true);\n      target.writeUInt32BE(data.length, 6, true);\n    }\n\n    if (!options.mask) {\n      target[1] = payloadLength;\n\n      if (merge) {\n        data.copy(target, offset);\n        return [target];\n      }\n\n      return [target, data];\n    }\n\n    const mask = crypto.randomBytes(4);\n    target[1] = payloadLength | 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      bufferUtil.mask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    bufferUtil.mask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  close(code, data, mask, cb) {\n    var buf;\n\n    if (code === undefined) {\n      code = 1000;\n    } else if (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code)) {\n      throw new Error('first argument must be a valid error code number');\n    }\n\n    if (data === undefined || data === '') {\n      if (code === 1000) {\n        buf = constants.EMPTY_BUFFER;\n      } else {\n        buf = Buffer.allocUnsafe(2);\n        buf.writeUInt16BE(code, 0, true);\n      }\n    } else {\n      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\n      buf.writeUInt16BE(code, 0, true);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */\n\n\n  doClose(data, mask, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x08,\n      mask,\n      readOnly: false\n    }), cb);\n  }\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n\n\n  ping(data, mask) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, data, mask, readOnly]);\n    } else {\n      this.doPing(data, mask, readOnly);\n    }\n  }\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n\n\n  doPing(data, mask, readOnly) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x09,\n      mask,\n      readOnly\n    }));\n  }\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n\n\n  pong(data, mask) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, data, mask, readOnly]);\n    } else {\n      this.doPong(data, mask, readOnly);\n    }\n  }\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n\n\n  doPong(data, mask, readOnly) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x0a,\n      mask,\n      readOnly\n    }));\n  }\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n\n\n  send(data, options, cb) {\n    var opcode = options.binary ? 2 : 1;\n    var rsv1 = options.compress;\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = data.length >= perMessageDeflate._threshold;\n      }\n\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(Sender.frame(data, {\n        fin: options.fin,\n        rsv1: false,\n        opcode,\n        mask: options.mask,\n        readOnly\n      }), cb);\n    }\n  }\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} compress Specifies whether or not to compress `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n\n\n  dispatch(data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this._deflating = false;\n      this.dequeue();\n    });\n  }\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n\n\n  dequeue() {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      params[0].apply(this, params.slice(1));\n    }\n  }\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n\n\n  enqueue(params) {\n    this._bufferedBytes += params[1].length;\n\n    this._queue.push(params);\n  }\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} cb Callback\n   * @private\n   */\n\n\n  sendFrame(list, cb) {\n    if (list.length === 2) {\n      this._socket.write(list[0]);\n\n      this._socket.write(list[1], cb);\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n\n}\n\nmodule.exports = Sender;\n/**\n * Converts an `ArrayBuffer` view into a buffer.\n *\n * @param {(DataView|TypedArray)} view The view to convert\n * @return {Buffer} Converted view\n * @private\n */\n\nfunction viewToBuffer(view) {\n  const buf = Buffer.from(view.buffer);\n\n  if (view.byteLength !== view.buffer.byteLength) {\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n  }\n\n  return buf;\n}","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/binance/node_modules/ws/lib/Sender.js"],"names":["safeBuffer","require","crypto","PerMessageDeflate","bufferUtil","ErrorCodes","constants","Buffer","Sender","constructor","socket","extensions","_extensions","_socket","_firstFragment","_compress","_bufferedBytes","_deflating","_queue","frame","data","options","merge","length","mask","readOnly","offset","payloadLength","target","allocUnsafe","fin","opcode","rsv1","writeUInt16BE","writeUInt32BE","copy","randomBytes","close","code","cb","buf","undefined","isValidErrorCode","Error","EMPTY_BUFFER","byteLength","write","enqueue","doClose","sendFrame","ping","isBuffer","ArrayBuffer","from","isView","viewToBuffer","doPing","pong","doPong","send","binary","compress","perMessageDeflate","extensionName","_threshold","opts","dispatch","_","dequeue","params","shift","apply","slice","push","list","module","exports","view","buffer","byteOffset"],"mappings":"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","sourcesContent":["/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\nconst crypto = require('crypto');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst bufferUtil = require('./BufferUtil');\nconst ErrorCodes = require('./ErrorCodes');\nconst constants = require('./Constants');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * HyBi Sender implementation.\n */\nclass Sender {\n  /**\n   * Creates a Sender instance.\n   *\n   * @param {net.Socket} socket The connection socket\n   * @param {Object} extensions An object containing the negotiated extensions\n   */\n  constructor (socket, extensions) {\n    this._extensions = extensions || {};\n    this._socket = socket;\n\n    this._firstFragment = true;\n    this._compress = false;\n\n    this._bufferedBytes = 0;\n    this._deflating = false;\n    this._queue = [];\n  }\n\n  /**\n   * Frames a piece of data according to the HyBi WebSocket protocol.\n   *\n   * @param {Buffer} data The data to frame\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @return {Buffer[]} The framed data as a list of `Buffer` instances\n   * @public\n   */\n  static frame (data, options) {\n    const merge = data.length < 1024 || (options.mask && options.readOnly);\n    var offset = options.mask ? 6 : 2;\n    var payloadLength = data.length;\n\n    if (data.length >= 65536) {\n      offset += 8;\n      payloadLength = 127;\n    } else if (data.length > 125) {\n      offset += 2;\n      payloadLength = 126;\n    }\n\n    const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);\n\n    target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n    if (options.rsv1) target[0] |= 0x40;\n\n    if (payloadLength === 126) {\n      target.writeUInt16BE(data.length, 2, true);\n    } else if (payloadLength === 127) {\n      target.writeUInt32BE(0, 2, true);\n      target.writeUInt32BE(data.length, 6, true);\n    }\n\n    if (!options.mask) {\n      target[1] = payloadLength;\n      if (merge) {\n        data.copy(target, offset);\n        return [target];\n      }\n\n      return [target, data];\n    }\n\n    const mask = crypto.randomBytes(4);\n\n    target[1] = payloadLength | 0x80;\n    target[offset - 4] = mask[0];\n    target[offset - 3] = mask[1];\n    target[offset - 2] = mask[2];\n    target[offset - 1] = mask[3];\n\n    if (merge) {\n      bufferUtil.mask(data, mask, target, offset, data.length);\n      return [target];\n    }\n\n    bufferUtil.mask(data, mask, data, 0, data.length);\n    return [target, data];\n  }\n\n  /**\n   * Sends a close message to the other peer.\n   *\n   * @param {(Number|undefined)} code The status code component of the body\n   * @param {String} data The message component of the body\n   * @param {Boolean} mask Specifies whether or not to mask the message\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (code, data, mask, cb) {\n    var buf;\n\n    if (code === undefined) {\n      code = 1000;\n    } else if (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code)) {\n      throw new Error('first argument must be a valid error code number');\n    }\n\n    if (data === undefined || data === '') {\n      if (code === 1000) {\n        buf = constants.EMPTY_BUFFER;\n      } else {\n        buf = Buffer.allocUnsafe(2);\n        buf.writeUInt16BE(code, 0, true);\n      }\n    } else {\n      buf = Buffer.allocUnsafe(2 + Buffer.byteLength(data));\n      buf.writeUInt16BE(code, 0, true);\n      buf.write(data, 2);\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doClose, buf, mask, cb]);\n    } else {\n      this.doClose(buf, mask, cb);\n    }\n  }\n\n  /**\n   * Frames and sends a close message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @private\n   */\n  doClose (data, mask, cb) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x08,\n      mask,\n      readOnly: false\n    }), cb);\n  }\n\n  /**\n   * Sends a ping message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n  ping (data, mask) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPing, data, mask, readOnly]);\n    } else {\n      this.doPing(data, mask, readOnly);\n    }\n  }\n\n  /**\n   * Frames and sends a ping message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n  doPing (data, mask, readOnly) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x09,\n      mask,\n      readOnly\n    }));\n  }\n\n  /**\n   * Sends a pong message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @public\n   */\n  pong (data, mask) {\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    if (this._deflating) {\n      this.enqueue([this.doPong, data, mask, readOnly]);\n    } else {\n      this.doPong(data, mask, readOnly);\n    }\n  }\n\n  /**\n   * Frames and sends a pong message.\n   *\n   * @param {*} data The message to send\n   * @param {Boolean} mask Specifies whether or not to mask `data`\n   * @param {Boolean} readOnly Specifies whether `data` can be modified\n   * @private\n   */\n  doPong (data, mask, readOnly) {\n    this.sendFrame(Sender.frame(data, {\n      fin: true,\n      rsv1: false,\n      opcode: 0x0a,\n      mask,\n      readOnly\n    }));\n  }\n\n  /**\n   * Sends a data message to the other peer.\n   *\n   * @param {*} data The message to send\n   * @param {Object} options Options object\n   * @param {Boolean} options.compress Specifies whether or not to compress `data`\n   * @param {Boolean} options.binary Specifies whether `data` is binary or text\n   * @param {Boolean} options.fin Specifies whether the fragment is the last one\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Function} cb Callback\n   * @public\n   */\n  send (data, options, cb) {\n    var opcode = options.binary ? 2 : 1;\n    var rsv1 = options.compress;\n    var readOnly = true;\n\n    if (!Buffer.isBuffer(data)) {\n      if (data instanceof ArrayBuffer) {\n        data = Buffer.from(data);\n      } else if (ArrayBuffer.isView(data)) {\n        data = viewToBuffer(data);\n      } else {\n        data = Buffer.from(data);\n        readOnly = false;\n      }\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    if (this._firstFragment) {\n      this._firstFragment = false;\n      if (rsv1 && perMessageDeflate) {\n        rsv1 = data.length >= perMessageDeflate._threshold;\n      }\n      this._compress = rsv1;\n    } else {\n      rsv1 = false;\n      opcode = 0;\n    }\n\n    if (options.fin) this._firstFragment = true;\n\n    if (perMessageDeflate) {\n      const opts = {\n        fin: options.fin,\n        rsv1,\n        opcode,\n        mask: options.mask,\n        readOnly\n      };\n\n      if (this._deflating) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    } else {\n      this.sendFrame(Sender.frame(data, {\n        fin: options.fin,\n        rsv1: false,\n        opcode,\n        mask: options.mask,\n        readOnly\n      }), cb);\n    }\n  }\n\n  /**\n   * Dispatches a data message.\n   *\n   * @param {Buffer} data The message to send\n   * @param {Boolean} compress Specifies whether or not to compress `data`\n   * @param {Object} options Options object\n   * @param {Number} options.opcode The opcode\n   * @param {Boolean} options.readOnly Specifies whether `data` can be modified\n   * @param {Boolean} options.fin Specifies whether or not to set the FIN bit\n   * @param {Boolean} options.mask Specifies whether or not to mask `data`\n   * @param {Boolean} options.rsv1 Specifies whether or not to set the RSV1 bit\n   * @param {Function} cb Callback\n   * @private\n   */\n  dispatch (data, compress, options, cb) {\n    if (!compress) {\n      this.sendFrame(Sender.frame(data, options), cb);\n      return;\n    }\n\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    this._deflating = true;\n    perMessageDeflate.compress(data, options.fin, (_, buf) => {\n      options.readOnly = false;\n      this.sendFrame(Sender.frame(buf, options), cb);\n      this._deflating = false;\n      this.dequeue();\n    });\n  }\n\n  /**\n   * Executes queued send operations.\n   *\n   * @private\n   */\n  dequeue () {\n    while (!this._deflating && this._queue.length) {\n      const params = this._queue.shift();\n\n      this._bufferedBytes -= params[1].length;\n      params[0].apply(this, params.slice(1));\n    }\n  }\n\n  /**\n   * Enqueues a send operation.\n   *\n   * @param {Array} params Send operation parameters.\n   * @private\n   */\n  enqueue (params) {\n    this._bufferedBytes += params[1].length;\n    this._queue.push(params);\n  }\n\n  /**\n   * Sends a frame.\n   *\n   * @param {Buffer[]} list The frame to send\n   * @param {Function} cb Callback\n   * @private\n   */\n  sendFrame (list, cb) {\n    if (list.length === 2) {\n      this._socket.write(list[0]);\n      this._socket.write(list[1], cb);\n    } else {\n      this._socket.write(list[0], cb);\n    }\n  }\n}\n\nmodule.exports = Sender;\n\n/**\n * Converts an `ArrayBuffer` view into a buffer.\n *\n * @param {(DataView|TypedArray)} view The view to convert\n * @return {Buffer} Converted view\n * @private\n */\nfunction viewToBuffer (view) {\n  const buf = Buffer.from(view.buffer);\n\n  if (view.byteLength !== view.buffer.byteLength) {\n    return buf.slice(view.byteOffset, view.byteOffset + view.byteLength);\n  }\n\n  return buf;\n}\n"]},"metadata":{},"sourceType":"script"}