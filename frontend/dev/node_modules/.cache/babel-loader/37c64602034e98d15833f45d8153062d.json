{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext, useState, createContext } from \"react\";\nimport socket from \"../Socket\";\nimport settingsStore from \"../Store/Settings\";\nimport priceStore from \"../Store/Price\";\nimport { AnomaliesContext, TimeContext, SettingsContext, PriceContext } from \"./Contexts\";\nimport ParsedText from \"./ParsedText\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data);\n  const LIMIT = 500;\n\n  if (state[action.type].length > LIMIT) {\n    state[action.type].shift();\n  } // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const _useState = useState(Date.now()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const _useState3 = useState(settingsStore.getState()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        settings = _useState4[0],\n        setSettings = _useState4[1];\n\n  const _useState5 = useState(priceStore.getState()[\"BTCUSDT\"]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        price = _useState6[0],\n        setPrice = _useState6[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n  console.log(anomalies); // Initialise the anomalies\n\n  useEffect(() => {\n    //Hit the cache api and set the initial state\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies to push to anomalies state\n\n    socket.on(\"NEW_ANOMALY\", anomaly => {\n      dispatchAnomalies({\n        type: anomaly.group,\n        data: [anomaly]\n      });\n    });\n  }, []); // Subscribe to stores\n\n  useEffect(() => {\n    const settingStoreUnsubscribe = settingsStore.subscribe(() => {\n      setSettings(settingsStore.getState());\n    });\n    const priceStoreUnsubscribe = priceStore.subscribe(() => {\n      setPrice(priceStore.getState()[\"BTCUSDT\"]);\n    });\n    return () => {\n      settingStoreUnsubscribe();\n      priceStoreUnsubscribe();\n    };\n  }, []); // Start setNow interval\n\n  useEffect(() => {\n    const threadId = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(threadId);\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(SettingsContext.Provider, {\n    value: settings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(PriceContext.Provider, {\n    value: price,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(TimeContext.Provider, {\n    value: now,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, dataDivs)))));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    });\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, //Anomalies are organised with oldest -> newest (needs to be reversed)\n  relevantAnomalies.reverse()));\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","createContext","socket","settingsStore","priceStore","AnomaliesContext","TimeContext","SettingsContext","PriceContext","ParsedText","anomaliesReducer","state","action","type","push","data","LIMIT","length","shift","JSON","parse","stringify","DataDisplay","initialState","anomalies","dispatchAnomalies","Date","now","setNow","getState","settings","setSettings","price","setPrice","dataTypes","console","log","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","on","anomaly","group","settingStoreUnsubscribe","subscribe","priceStoreUnsubscribe","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","slice","toUpperCase","reverse"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState, createContext} from \"react\";\nimport socket from \"../Socket\";\nimport settingsStore from \"../Store/Settings\";\nimport priceStore from \"../Store/Price\";\nimport {AnomaliesContext, TimeContext, SettingsContext, PriceContext} from \"./Contexts\";\nimport ParsedText from \"./ParsedText\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    const LIMIT = 500;\n    if (state[action.type].length > LIMIT) {\n        state[action.type].shift();\n    }\n\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const [settings, setSettings] = useState(settingsStore.getState());\n    const [price, setPrice] = useState(priceStore.getState()[\"BTCUSDT\"]);\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    console.log(anomalies)\n\n    // Initialise the anomalies\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies to push to anomalies state\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            dispatchAnomalies({type: anomaly.group, data: [anomaly]});\n        });\n    }, []);\n\n    // Subscribe to stores\n    useEffect(() => {\n        const settingStoreUnsubscribe = settingsStore.subscribe(() => {\n            setSettings(settingsStore.getState());\n        });\n\n        const priceStoreUnsubscribe = priceStore.subscribe(() => {\n            setPrice(priceStore.getState()[\"BTCUSDT\"]);\n        });\n\n        return () => {\n            settingStoreUnsubscribe();\n            priceStoreUnsubscribe();\n        }\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <SettingsContext.Provider value={settings}>\n                <PriceContext.Provider value={price}>\n                    <TimeContext.Provider value={now}>\n                        <AnomaliesContext.Provider value={anomalies}>\n                            {dataDivs}\n                        </AnomaliesContext.Provider>\n                    </TimeContext.Provider>\n                </PriceContext.Provider>\n            </SettingsContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <ParsedText dataType={dataType} anomaly={anomaly} key={index}/>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                { //Anomalies are organised with oldest -> newest (needs to be reversed)\n                  relevantAnomalies.reverse() }\n            </div>\n        </div>\n    )\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}