{"ast":null,"code":"'use strict';\n/**\n * Class representing an event.\n *\n * @private\n */\n\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor(type, target) {\n    this.target = target;\n    this.type = type;\n  }\n\n}\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\n\n\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(data, target) {\n    super('message', target);\n    this.data = data;\n  }\n\n}\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\n\n\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(code, reason, target) {\n    super('close', target);\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n\n}\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\n\n\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor(target) {\n    super('open', target);\n  }\n\n}\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\n\n\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener(method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage(data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose(code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError(event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen() {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener(method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n\n};\nmodule.exports = EventTarget;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/binance/node_modules/ws/lib/EventTarget.js"],"names":["Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","EventTarget","addEventListener","method","listener","onMessage","call","onClose","message","onError","event","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n"]},"metadata":{},"sourceType":"script"}