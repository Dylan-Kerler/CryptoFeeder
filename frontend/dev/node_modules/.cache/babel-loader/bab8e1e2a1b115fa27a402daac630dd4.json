{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/TopBar.js\";\nimport React, { useEffect, useState } from \"react\";\nimport priceStore from \"./Store/Price\";\nimport settingsStore, { settingsActions } from \"./Store/Settings\";\n\nconst TopBar = () => {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, React.createElement(SearchForCoin, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }));\n};\n\nconst coins = [{\n  name: \"Ethereum\",\n  symbol: \"ETH\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}, {\n  name: \"ChainLink\",\n  symbol: \"LINK\"\n}];\n\nconst SearchForCoin = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        searchValue = _useState2[0],\n        setSearchValue = _useState2[1];\n\n  const handleSearchChange = event => {\n    setSearchValue(event.target.value);\n  };\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        predictions = _useState4[0],\n        setPredictions = _useState4[1];\n\n  useEffect(() => {\n    setPredictions([]);\n    const lowerCaseSearchValue = searchValue.toLowerCase();\n\n    for (const coin of coins) {\n      if ((coin.name.toLowerCase().includes(lowerCaseSearchValue) || coin.symbol.toLowerCase().includes(lowerCaseSearchValue)) && searchValue !== \"\") {\n        setPredictions(predictions => {\n          if (predictions.length < 5) {\n            predictions.push(coin);\n          }\n\n          return predictions;\n        });\n      }\n    }\n  }, [searchValue]);\n  const predictionElements = predictions.map((prediction, index) => React.createElement(Prediction, {\n    name: prediction.name,\n    symbol: prediction.symbol,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }));\n\n  const _useState5 = useState(\"0px\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        predictionStyleWidth = _useState6[0],\n        setPredictionStyleWidth = _useState6[1];\n\n  useEffect(() => {\n    // on mount initialise the width of prediction div to be the same as the input search\n    const width = document.getElementById(\"search_for_coin_input\").getBoundingClientRect().width + \"px\";\n    setPredictionStyleWidth(width);\n  }, []);\n  const predictionStyle = {\n    width: predictionStyleWidth,\n    position: \"fixed\",\n    border: \"1px solid #D8D8D8\",\n    borderRadius: \"10px\",\n    textAlign: \"left\",\n    zIndex: 20,\n    overflow: \"hidden\",\n    backgroundColor: \"white\"\n  };\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        showPredictions = _useState8[0],\n        setShowPredictions = _useState8[1];\n\n  const handlePredictionSelect = () => {\n    setShowPredictions(false);\n    setSearchValue(\"\");\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    id: \"search_for_coin_input\",\n    placeholder: \"Search for coin\",\n    value: searchValue,\n    onChange: handleSearchChange,\n    onClick: () => setShowPredictions(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }), predictions.length > 0 && showPredictions && React.createElement(\"div\", {\n    style: predictionStyle,\n    onClick: handlePredictionSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, predictionElements)));\n};\n\nconst Prediction = props => {\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isHover = _useState10[0],\n        setIsHover = _useState10[1];\n\n  const toggleHoverExit = () => {\n    setIsHover(false);\n  };\n\n  const toggleHoverEnter = () => {\n    setIsHover(true);\n  };\n\n  const handleSelect = () => {\n    settingsStore.dispatch({\n      type: settingsActions.UPDATE_COIN,\n      coin: props.symbol\n    });\n  };\n\n  const mouseOutClassName = isHover ? \"\" : \"prediction_mouse_out\";\n  return React.createElement(\"div\", {\n    className: \"search_prediction \" + mouseOutClassName,\n    onMouseEnter: toggleHoverEnter,\n    onMouseLeave: toggleHoverExit,\n    onClick: handleSelect,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, props.name, \" (\", props.symbol, \")\");\n};\n\nexport default TopBar;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/TopBar.js"],"names":["React","useEffect","useState","priceStore","settingsStore","settingsActions","TopBar","coins","name","symbol","SearchForCoin","searchValue","setSearchValue","handleSearchChange","event","target","value","predictions","setPredictions","lowerCaseSearchValue","toLowerCase","coin","includes","length","push","predictionElements","map","prediction","index","predictionStyleWidth","setPredictionStyleWidth","width","document","getElementById","getBoundingClientRect","predictionStyle","position","border","borderRadius","textAlign","zIndex","overflow","backgroundColor","showPredictions","setShowPredictions","handlePredictionSelect","Prediction","props","isHover","setIsHover","toggleHoverExit","toggleHoverEnter","handleSelect","dispatch","type","UPDATE_COIN","mouseOutClassName"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport priceStore from \"./Store/Price\";\nimport settingsStore, {settingsActions} from \"./Store/Settings\";\n\n\nconst TopBar = () => {\n    return (\n        <React.Fragment>\n            <SearchForCoin/>\n        </React.Fragment>\n    );\n};\n\nconst coins = [\n    {\n        name: \"Ethereum\",\n        symbol: \"ETH\",\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    },\n    {\n        name: \"ChainLink\",\n        symbol: \"LINK\"\n    }\n];\n\nconst SearchForCoin = () => {\n    const [searchValue, setSearchValue] = useState(\"\");\n    const handleSearchChange = event => {\n        setSearchValue(event.target.value);\n    };\n\n    const [predictions, setPredictions] = useState([]);\n    useEffect(() => {\n        setPredictions([]);\n        const lowerCaseSearchValue = searchValue.toLowerCase();\n        for (const coin of coins) {\n            if ((coin.name.toLowerCase().includes(lowerCaseSearchValue)\n                    || coin.symbol.toLowerCase().includes(lowerCaseSearchValue))\n                        && searchValue !== \"\") {\n                setPredictions(predictions => {\n                    if (predictions.length < 5) { predictions.push(coin); }\n                    return predictions;\n                });\n            }\n        }\n    }, [searchValue]);\n\n    const predictionElements = predictions.map((prediction, index) =>\n        <Prediction name={prediction.name} symbol={prediction.symbol} key={index}/>\n    );\n\n    const [predictionStyleWidth, setPredictionStyleWidth] = useState(\"0px\");\n    useEffect(() => { // on mount initialise the width of prediction div to be the same as the input search\n        const width = document.getElementById(\"search_for_coin_input\").getBoundingClientRect().width + \"px\";\n        setPredictionStyleWidth(width);\n    }, []);\n\n    const predictionStyle = {\n        width: predictionStyleWidth,\n        position: \"fixed\",\n        border: \"1px solid #D8D8D8\",\n        borderRadius: \"10px\",\n        textAlign: \"left\",\n        zIndex: 20,\n        overflow: \"hidden\",\n        backgroundColor: \"white\"\n    };\n\n    const [showPredictions, setShowPredictions] = useState(false);\n    const handlePredictionSelect = () => {\n      setShowPredictions(false);\n      setSearchValue(\"\");\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <input id=\"search_for_coin_input\" placeholder=\"Search for coin\"\n                       value={searchValue} onChange={handleSearchChange} onClick={() => setShowPredictions(true)}/>\n                {\n                    predictions.length > 0 && showPredictions &&\n                        <div style={predictionStyle} onClick={handlePredictionSelect}>\n                            {predictionElements}\n                        </div>\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst Prediction = props => {\n    const [isHover, setIsHover] = useState(true);\n\n    const toggleHoverExit = () => {\n        setIsHover(false);\n    };\n\n    const toggleHoverEnter = () => {\n        setIsHover(true);\n    };\n\n    const handleSelect = () => {\n        settingsStore.dispatch({\n            type: settingsActions.UPDATE_COIN,\n            coin: props.symbol\n        });\n    };\n\n    const mouseOutClassName = isHover ? \"\" : \"prediction_mouse_out\";\n\n    return (\n        <div className={\"search_prediction \" + mouseOutClassName}\n             onMouseEnter={toggleHoverEnter} onMouseLeave={toggleHoverExit}\n             onClick={handleSelect}>\n            {props.name} ({props.symbol})\n        </div>\n    )\n};\n\nexport default TopBar;"]},"metadata":{},"sourceType":"module"}