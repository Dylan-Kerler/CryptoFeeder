{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext } from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data);\n};\n\nconst AnomaliesContext = React.createContext();\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [1],\n    \"price\": [1],\n    \"liquidity\": [1]\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  useEffect(() => {//Hit the cache api and set the initial state with dispatchAnomalies\n    //Subscribe to anomalies\n    //On new anomaly, determine the type then push to the anomalies state\n  }, []);\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n  const dataDivs = dataTypes.map(type => React.createElement(DataDiv, {\n    dataType: type,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, dataDivs, \";\"));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map(anomaly => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Volume\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, relevantAnomalies));\n};\n\nconst ParsedText = props => {\n  //convert the data to text here\n  //check the data type then convert the text and return it\n  const dataType = props.datatype;\n  return (// This needs to be rendered correctly\n    React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: `${dataType}_text`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"$14,345 worth of Ravencoin was bought in the last 17 minutes on Binance (RVN/BTC) - 30% higher than the average 1 hour volume for the past 200 candles\"), React.createElement(\"p\", {\n      className: \"data_timestamp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"18:34:28 GMT Tues 24th September 2019\"))\n  );\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","anomaliesReducer","state","action","type","push","data","AnomaliesContext","createContext","DataDisplay","initialState","anomalies","dispatchAnomalies","dataTypes","dataDivs","map","DataDiv","props","dataType","relevantAnomalies","anomaly","ParsedText","datatype"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,UAAtC,QAAuD,OAAvD;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,EAAAA,KAAK,CAACC,MAAM,CAACC,IAAR,CAAL,CAAmBC,IAAnB,CAAwB,GAAGF,MAAM,CAACG,IAAlC;AACH,CAFD;;AAIA,MAAMC,gBAAgB,GAAGV,KAAK,CAACW,aAAN,EAAzB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,YAAY,GAAG;AACjB,cAAgB,CAAC,CAAD,CADC;AAEjB,aAAgB,CAAC,CAAD,CAFC;AAGjB,iBAAgB,CAAC,CAAD;AAHC,GAArB;;AADsB,sBAOiBX,UAAU,CAACE,gBAAD,EAAmBS,YAAnB,CAP3B;AAAA;AAAA,QAOfC,SAPe;AAAA,QAOJC,iBAPI;;AAStBd,EAAAA,SAAS,CAAC,MAAM,CACZ;AACA;AACA;AACH,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMe,SAAS,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,CAAlB;AACA,QAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAcX,IAAI,IAAI,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEA,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtB,CAAjB;AACA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEO,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,QADL,MADJ,CADJ;AAOH,CAxBD;;AA0BA,MAAME,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAMN,SAAS,GAAGX,UAAU,CAACO,gBAAD,CAA5B;AACA,QAAMW,QAAQ,GAAGD,KAAK,CAACC,QAAvB,CAFuB,CAIvB;;AACA,QAAMC,iBAAiB,GAAGR,SAAS,CAACM,KAAK,CAACC,QAAP,CAAT,CAA0BH,GAA1B,CAA8BK,OAAO,IAAI;AAC/D,WACI;AAAK,MAAA,EAAE,EAAG,GAAEF,QAAS,SAArB;AAA+B,MAAA,SAAS,EAAG,YAAWA,QAAS,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEA,QAAtB;AAAgC,MAAA,OAAO,EAAEE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH,GANyB,CAA1B;AAQA,SACI;AAAK,IAAA,EAAE,EAAG,GAAEF,QAAS,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,iBADL,CAFJ,CADJ;AAQH,CArBD;;AAuBA,MAAME,UAAU,GAAIJ,KAAD,IAAW;AAC1B;AACA;AACA,QAAMC,QAAQ,GAAGD,KAAK,CAACK,QAAvB;AACA,SAEI;AACA,wBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAG,GAAEJ,QAAS,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gKADJ,EAGI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAHJ;AAHJ;AASH,CAbD;;AAeA,eAAeT,WAAf","sourcesContent":["import React, {useEffect, useReducer, useContext} from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n};\n\nconst AnomaliesContext = React.createContext();\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [1],\n        \"price\":        [1],\n        \"liquidity\":    [1],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n\n    useEffect(() => {\n        //Hit the cache api and set the initial state with dispatchAnomalies\n        //Subscribe to anomalies\n        //On new anomaly, determine the type then push to the anomalies state\n    }, []);\n\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n    const dataDivs = dataTypes.map(type => <DataDiv dataType={type}/>);\n    return (\n        <React.Fragment>\n            <AnomaliesContext.Provider value={anomalies}>\n                {dataDivs};\n            </AnomaliesContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map(anomaly => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>Volume</h1>\n            <div>\n                {relevantAnomalies}\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = (props) => {\n    //convert the data to text here\n    //check the data type then convert the text and return it\n    const dataType = props.datatype;\n    return (\n\n        // This needs to be rendered correctly\n        <React.Fragment>\n            <p className={`${dataType}_text`}>$14,345 worth of Ravencoin was bought in the last 17 minutes on Binance\n                (RVN/BTC) - 30% higher than the average 1 hour volume for the past 200 candles</p>\n            <p className=\"data_timestamp\">18:34:28 GMT Tues 24th September 2019</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}