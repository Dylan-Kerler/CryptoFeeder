{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext } from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data); // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n  useEffect(() => {\n    //Hit the cache api and set the initial state with dispatchAnomalies\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies\n    //On new anomaly, determine the type then push to the anomalies state\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, dataDivs));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, relevantAnomalies));\n};\n\nconst ParsedText = props => {\n  //convert the data to text here\n  //check the data type then convert the text and return it\n  const dataType = props.datatype;\n  return (// This needs to be rendered correctly\n    React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: `${dataType}_text`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"$14,345 worth of Ravencoin was bought in the last 17 minutes on Binance (RVN/BTC) - 30% higher than the average 1 hour volume for the past 200 candles\"), React.createElement(\"p\", {\n      className: \"data_timestamp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"18:34:28 GMT Tues 24th September 2019\"))\n  );\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","anomaliesReducer","state","action","type","push","data","JSON","parse","stringify","AnomaliesContext","createContext","DataDisplay","initialState","anomalies","dispatchAnomalies","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","anomaly","slice","toUpperCase","ParsedText","datatype"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,UAA1B,EAAsCC,UAAtC,QAAuD,OAAvD;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxCD,EAAAA,KAAK,CAACC,MAAM,CAACC,IAAR,CAAL,CAAmBC,IAAnB,CAAwB,GAAGF,MAAM,CAACG,IAAlC,EADwC,CAExC;;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeP,KAAf,CAAX,CAAP;AACH,CAJD;;AAMA,MAAMQ,gBAAgB,GAAGb,KAAK,CAACc,aAAN,EAAzB;;AAEA,MAAMC,WAAW,GAAG,MAAM;AACtB,QAAMC,YAAY,GAAG;AACjB,cAAgB,EADC;AAEjB,aAAgB,EAFC;AAGjB,iBAAgB;AAHC,GAArB;;AADsB,sBAOiBd,UAAU,CAACE,gBAAD,EAAmBY,YAAnB,CAP3B;AAAA;AAAA,QAOfC,SAPe;AAAA,QAOJC,iBAPI;;AAQtB,QAAMC,SAAS,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,WAApB,CAAlB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAmB,IAAAA,KAAK,CAAC,wCAAD,CAAL,CAAgDC,IAAhD,CAAqDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBG,gBAAgB,IAAI;AAC5FC,MAAAA,MAAM,CAACC,IAAP,CAAYF,gBAAZ,EAA8BG,OAA9B,CAAsCC,GAAG,IAAI;AACzC,YAAIT,SAAS,CAACU,QAAV,CAAmBD,GAAnB,CAAJ,EAA6B;AACzBV,UAAAA,iBAAiB,CAAC;AAACX,YAAAA,IAAI,EAAEqB,GAAP;AAAYnB,YAAAA,IAAI,EAAEe,gBAAgB,CAACI,GAAD;AAAlC,WAAD,CAAjB;AACH;AACJ,OAJD;AAKH,KAN2D,CAA5D,EAFY,CAUZ;AACA;AACH,GAZQ,EAYN,EAZM,CAAT;AAcA,QAAME,QAAQ,GAAGX,SAAS,CAACY,GAAV,CAAc,CAACxB,IAAD,EAAOyB,KAAP,KAAiB,oBAAC,OAAD;AAAS,IAAA,QAAQ,EAAEzB,IAAnB;AAAyB,IAAA,GAAG,EAAEyB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/B,CAAjB;AACA,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEf,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKa,QADL,CADJ,CADJ;AAOH,CAhCD;;AAkCA,MAAMG,OAAO,GAAIC,KAAD,IAAW;AACvB,QAAMjB,SAAS,GAAGd,UAAU,CAACU,gBAAD,CAA5B;AACA,QAAMsB,QAAQ,GAAGD,KAAK,CAACC,QAAvB,CAFuB,CAIvB;;AACA,QAAMC,iBAAiB,GAAGnB,SAAS,CAACiB,KAAK,CAACC,QAAP,CAAT,CAA0BJ,GAA1B,CAA8B,CAACM,OAAD,EAAUL,KAAV,KAAoB;AACxE,WACI;AAAK,MAAA,EAAE,EAAG,GAAEG,QAAS,SAArB;AAA+B,MAAA,SAAS,EAAG,YAAWA,QAAS,MAA/D;AAAsE,MAAA,GAAG,EAAEH,KAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAY,MAAA,QAAQ,EAAEG,QAAtB;AAAgC,MAAA,OAAO,EAAEE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH,GANyB,CAA1B;AAQA,SACI;AAAK,IAAA,EAAE,EAAG,GAAEF,QAAS,WAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,GAAEA,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAiB,CAAjB,EAAoBC,WAApB,EAAkC,GAAEJ,QAAQ,CAACG,KAAT,CAAe,CAAf,CAAkB,EAA9D,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,iBADL,CAFJ,CADJ;AAQH,CArBD;;AAuBA,MAAMI,UAAU,GAAIN,KAAD,IAAW;AAC1B;AACA;AACA,QAAMC,QAAQ,GAAGD,KAAK,CAACO,QAAvB;AACA,SAEI;AACA,wBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,SAAS,EAAG,GAAEN,QAAS,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gKADJ,EAGI;AAAG,MAAA,SAAS,EAAC,gBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAHJ;AAHJ;AASH,CAbD;;AAeA,eAAepB,WAAf","sourcesContent":["import React, {useEffect, useReducer, useContext} from \"react\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = React.createContext();\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    useEffect(() => {\n        //Hit the cache api and set the initial state with dispatchAnomalies\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies\n        //On new anomaly, determine the type then push to the anomalies state\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <AnomaliesContext.Provider value={anomalies}>\n                {dataDivs}\n            </AnomaliesContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`} key={index}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                {relevantAnomalies}\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = (props) => {\n    //convert the data to text here\n    //check the data type then convert the text and return it\n    const dataType = props.datatype;\n    return (\n\n        // This needs to be rendered correctly\n        <React.Fragment>\n            <p className={`${dataType}_text`}>$14,345 worth of Ravencoin was bought in the last 17 minutes on Binance\n                (RVN/BTC) - 30% higher than the average 1 hour volume for the past 200 candles</p>\n            <p className=\"data_timestamp\">18:34:28 GMT Tues 24th September 2019</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}