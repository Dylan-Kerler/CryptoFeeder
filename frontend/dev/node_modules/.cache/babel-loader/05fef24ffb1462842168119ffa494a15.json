{"ast":null,"code":"import _objectSpread from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { createStore } from \"redux\";\nimport socket from \"../Socket\";\nconst priceActions = {\n  UPDATE_PRICE: \"UPDATE_PRICE\"\n};\n\nconst priceReducer = (state, action) => {\n  const newState = _objectSpread({}, state); //shallow copy is sufficient here\n\n\n  switch (action.type) {\n    case priceActions.UPDATE_PRICE:\n      newState[action.data.pair] = action.data.price.toFixed(3);\n      break;\n\n    default:\n      console.log(\"Invalid action type for priceReducer, got: \", action.type);\n      break;\n  }\n\n  return newState;\n};\n\nconst initialState = {};\nconst priceStore = createStore(priceReducer, initialState);\nsocket.on(\"NEW_BTC_PRICE\", price => {\n  priceStore.dispatch({\n    type: priceActions.UPDATE_PRICE,\n    data: {\n      pair: \"BTCUSDT\",\n      price: parseFloat(price)\n    }\n  });\n});\nexport default priceStore;\nexport { priceReducer };","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/Store/Price.js"],"names":["createStore","socket","priceActions","UPDATE_PRICE","priceReducer","state","action","newState","type","data","pair","price","toFixed","console","log","initialState","priceStore","on","dispatch","parseFloat"],"mappings":";AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAE;AADG,CAArB;;AAIA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,QAAMC,QAAQ,qBAAOF,KAAP,CAAd,CADoC,CACP;;;AAC7B,UAAQC,MAAM,CAACE,IAAf;AACI,SAAKN,YAAY,CAACC,YAAlB;AACII,MAAAA,QAAQ,CAACD,MAAM,CAACG,IAAP,CAAYC,IAAb,CAAR,GAA6BJ,MAAM,CAACG,IAAP,CAAYE,KAAZ,CAAkBC,OAAlB,CAA0B,CAA1B,CAA7B;AACA;;AACJ;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ,EAA2DR,MAAM,CAACE,IAAlE;AACA;AANR;;AASA,SAAOD,QAAP;AACH,CAZD;;AAcA,MAAMQ,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAGhB,WAAW,CAACI,YAAD,EAAeW,YAAf,CAA9B;AACAd,MAAM,CAACgB,EAAP,CAAU,eAAV,EAA2BN,KAAK,IAAI;AAChCK,EAAAA,UAAU,CAACE,QAAX,CAAoB;AAChBV,IAAAA,IAAI,EAAEN,YAAY,CAACC,YADH;AAEhBM,IAAAA,IAAI,EAAE;AACFC,MAAAA,IAAI,EAAE,SADJ;AAEFC,MAAAA,KAAK,EAAEQ,UAAU,CAACR,KAAD;AAFf;AAFU,GAApB;AAOH,CARD;AAUA,eAAeK,UAAf;AACA,SAASZ,YAAT","sourcesContent":["import { createStore } from \"redux\";\nimport socket from \"../Socket\";\n\nconst priceActions = {\n    UPDATE_PRICE: \"UPDATE_PRICE\",\n};\n\nconst priceReducer = (state, action) => {\n    const newState = {...state}; //shallow copy is sufficient here\n    switch (action.type) {\n        case priceActions.UPDATE_PRICE:\n            newState[action.data.pair] = action.data.price.toFixed(3);\n            break;\n        default:\n            console.log(\"Invalid action type for priceReducer, got: \", action.type);\n            break;\n    }\n\n    return newState;\n};\n\nconst initialState = {};\n\nconst priceStore = createStore(priceReducer, initialState);\nsocket.on(\"NEW_BTC_PRICE\", price => {\n    priceStore.dispatch({\n        type: priceActions.UPDATE_PRICE,\n        data: {\n            pair: \"BTCUSDT\",\n            price: parseFloat(price)\n        }\n    })\n});\n\nexport default priceStore;\nexport { priceReducer };"]},"metadata":{},"sourceType":"module"}