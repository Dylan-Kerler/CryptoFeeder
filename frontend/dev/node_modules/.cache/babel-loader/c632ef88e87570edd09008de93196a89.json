{"ast":null,"code":"import _slicedToArray from \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js\";\nimport React, { useEffect, useReducer, useContext, useState, createContext } from \"react\";\nimport io from \"socket.io-client\";\nimport settingsStore from \"../Store/Settings\";\n\nconst anomaliesReducer = (state, action) => {\n  state[action.type].push(...action.data);\n  const LIMIT = 500;\n\n  if (state[action.type].length > LIMIT) {\n    state[action.type].shift();\n  } // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n\n\n  return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = createContext();\nconst TimeContext = createContext(Date.now());\nconst SettingsContext = createContext(settingsStore.getState());\n\nconst DataDisplay = () => {\n  const initialState = {\n    \"volume\": [],\n    \"price\": [],\n    \"liquidity\": []\n  };\n\n  const _useReducer = useReducer(anomaliesReducer, initialState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        anomalies = _useReducer2[0],\n        dispatchAnomalies = _useReducer2[1];\n\n  const _useState = useState(Date.now()),\n        _useState2 = _slicedToArray(_useState, 2),\n        now = _useState2[0],\n        setNow = _useState2[1];\n\n  const _useState3 = useState(settingsStore.getState()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        settings = _useState4[0],\n        setSettings = _useState4[1];\n\n  const dataTypes = [\"volume\", \"price\", \"liquidity\"]; // Initialise the anomalies\n\n  useEffect(() => {\n    //Hit the cache api and set the initial state\n    fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n      Object.keys(recentEventCache).forEach(key => {\n        if (dataTypes.includes(key)) {\n          dispatchAnomalies({\n            type: key,\n            data: recentEventCache[key]\n          });\n        }\n      });\n    })); //Subscribe to anomalies to push to anomalies state\n\n    const socket = io(\"localhost:8080\");\n    socket.on(\"NEW_ANOMALY\", anomaly => {\n      dispatchAnomalies({\n        type: anomaly.group,\n        data: [anomaly]\n      });\n    });\n  }, []); // Subscribe to the setting store\n\n  useEffect(() => {\n    return settingsStore.subscribe(() => {\n      setSettings(settingsStore.getState());\n    });\n  }, []); // Start setNow interval\n\n  useEffect(() => {\n    const threadId = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(threadId);\n  }, []);\n  const dataDivs = dataTypes.map((type, index) => React.createElement(DataDiv, {\n    dataType: type,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }));\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(SettingsContext.Provider, {\n    value: settings,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(TimeContext.Provider, {\n    value: now,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(AnomaliesContext.Provider, {\n    value: anomalies,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, dataDivs))));\n};\n\nconst DataDiv = props => {\n  const anomalies = useContext(AnomaliesContext);\n  const dataType = props.dataType; // Loop through all anomalies of that type and parse the anomaly into text\n\n  const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n    return React.createElement(\"div\", {\n      id: `${dataType}_data_1`,\n      className: `data_box ${dataType}_box`,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(ParsedText, {\n      dataType: dataType,\n      anomaly: anomaly,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"div\", {\n    id: `${dataType}_data_div`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, `${dataType.slice(0, 1).toUpperCase()}${dataType.slice(1)}`), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, //Anomalies are organised with oldest -> newest (needs to be reversed)\n  relevantAnomalies.reverse()));\n};\n\nconst ParsedText = ({\n  anomaly,\n  dataType\n}) => {\n  let element = \"\";\n  const settings = useContext(SettingsContext);\n  const NOW = useContext(TimeContext);\n  const timePassed = NOW - anomaly.data.timestamp * 1000;\n  const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\" : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\" : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n  const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n  const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n  switch (anomaly.type) {\n    case \"volumeAnomaly\":\n      if (anomaly.data.total >= settings.minVolume) {\n        element = React.createElement(\"p\", {\n          className: `${dataType}_text`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, anomaly.data.total + \" \", \" BTC worth of \", anomaly.coin + \" \", \"was \", anomaly.data.isBuyVolume ? \"bought \" : \"sold \", \" on \", anomaly.exchange + \" \", \"in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \", \" higher than the 200 hourly average.\", movingTimeString);\n      }\n\n      break;\n\n    case \"anomalyPriceRange\":\n      if (anomaly.data.change * 100 >= settings.minPriceIncrease) {\n        element = React.createElement(\"p\", {\n          className: `${dataType}_text`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130\n          },\n          __self: this\n        }, anomaly.coin, \" just \", anomaly.data.positive ? \"pumped \" : \"dumped \", (anomaly.data.change * 100).toFixed(2), \"% in the past \", anomalyTimeRangeString, \" -\", \" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\", \" higher than the 200 hourly average\", \" \" + movingTimeString);\n      }\n\n      break;\n\n    case \"OrderBookIncrease\":\n      if (anomaly.data.total >= settings.minOrderSize) {\n        element = React.createElement(\"p\", {\n          className: `${dataType}_text`,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, \"$\", anomaly.data.total, \" \", anomaly.data.isBuySide ? \"buy \" : \"sell\", \" wall for \", anomaly.coin + \" \", \"appeared \", movingTimeString, \" on \", anomaly.exchange, \" - A \", ((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2), \"% increase from the 200 hourly average\");\n      }\n\n      break;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, element, React.createElement(\"p\", {\n    className: \"data_timestamp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, new Date(anomaly.data.timestamp * 1000).toGMTString()));\n};\n\nexport default DataDisplay;","map":{"version":3,"sources":["/home/levi/Desktop/WebProjects/CryptoFeeder/frontend/dev/src/ReactComponents/DataDisplay/DataDisplay.js"],"names":["React","useEffect","useReducer","useContext","useState","createContext","io","settingsStore","anomaliesReducer","state","action","type","push","data","LIMIT","length","shift","JSON","parse","stringify","AnomaliesContext","TimeContext","Date","now","SettingsContext","getState","DataDisplay","initialState","anomalies","dispatchAnomalies","setNow","settings","setSettings","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","key","includes","socket","on","anomaly","group","subscribe","threadId","setInterval","clearInterval","dataDivs","map","index","DataDiv","props","dataType","relevantAnomalies","slice","toUpperCase","reverse","ParsedText","element","NOW","timePassed","timestamp","movingTimeString","Math","floor","anomalyTimeRange","limitTimestamp","anomalyTimeRangeString","total","minVolume","coin","isBuyVolume","exchange","hourlyMa200","toFixed","change","minPriceIncrease","positive","range","maRange","minOrderSize","isBuySide","buySide","maTotal","toGMTString"],"mappings":"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","sourcesContent":["import React, {useEffect, useReducer, useContext, useState, createContext} from \"react\";\nimport io from \"socket.io-client\";\nimport settingsStore from \"../Store/Settings\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    const LIMIT = 500;\n    if (state[action.type].length > LIMIT) {\n        state[action.type].shift();\n    }\n\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst AnomaliesContext = createContext();\nconst TimeContext = createContext(Date.now());\nconst SettingsContext = createContext(settingsStore.getState());\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const [settings, setSettings] = useState(settingsStore.getState());\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n    // Initialise the anomalies\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(\"http://localhost:8080/api/little_cache\").then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies to push to anomalies state\n        const socket = io(\"localhost:8080\");\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            dispatchAnomalies({type: anomaly.group, data: [anomaly]});\n        });\n    }, []);\n\n    // Subscribe to the setting store\n    useEffect(() => {\n        return settingsStore.subscribe(() => {\n            setSettings(settingsStore.getState());\n        });\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <SettingsContext.Provider value={settings}>\n                <TimeContext.Provider value={now}>\n                    <AnomaliesContext.Provider value={anomalies}>\n                        {dataDivs}\n                    </AnomaliesContext.Provider>\n                </TimeContext.Provider>\n            </SettingsContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box`} key={index}>\n                <ParsedText dataType={dataType} anomaly={anomaly}/>\n            </div>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                { //Anomalies are organised with oldest -> newest (needs to be reversed)\n                  relevantAnomalies.reverse() }\n            </div>\n        </div>\n    )\n};\n\nconst ParsedText = ({anomaly, dataType}) => {\n    let element = \"\";\n    const settings = useContext(SettingsContext);\n    const NOW = useContext(TimeContext);\n    const timePassed = NOW - anomaly.data.timestamp * 1000;\n    const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\"\n                                                    : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\"\n                                                    : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n\n    const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.floor(anomalyTimeRange / 1000 / 60) + \" minutes \" : Math.floor(anomalyTimeRange / 1000) + \" seconds \";\n\n    switch (anomaly.type) {\n        case \"volumeAnomaly\":\n            if (anomaly.data.total >= settings.minVolume) {\n                element = <p className={`${dataType}_text`}>\n                    {anomaly.data.total + \" \"} BTC worth of {anomaly.coin + \" \"}\n                    was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"} on {anomaly.exchange + \" \"}\n                    in the past {anomalyTimeRangeString} -\n                    {\" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \"} higher than the 200 hourly average.\n                    {movingTimeString}\n                </p>;\n            }\n            break;\n        case \"anomalyPriceRange\":\n            if (anomaly.data.change * 100 >= settings.minPriceIncrease) {\n                element = <p className={`${dataType}_text`}>\n                    {anomaly.coin} just {anomaly.data.positive ? \"pumped \" : \"dumped \"}\n                    {(anomaly.data.change * 100).toFixed(2)}%\n                    in the past {anomalyTimeRangeString} -\n                    {\" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\"} higher than the 200 hourly average\n                    {\" \" + movingTimeString}\n                </p>\n            }\n            break;\n\n        case \"OrderBookIncrease\":\n            if (anomaly.data.total >= settings.minOrderSize) {\n                element = <p className={`${dataType}_text`}>\n                    ${anomaly.data.total} {anomaly.data.isBuySide ? \"buy \" : \"sell\"} wall for {anomaly.coin + \" \"}\n                    appeared {movingTimeString} on {anomaly.exchange} - A {((anomaly.data.buySide / anomaly.data.maTotal - 1) * 100).toFixed(2)}% increase\n                    from the 200 hourly average\n                </p>\n            }\n            break;\n    }\n\n    return (\n        <React.Fragment>\n            {element}\n            <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n        </React.Fragment>\n    );\n};\n\nexport default DataDisplay;\n"]},"metadata":{},"sourceType":"module"}