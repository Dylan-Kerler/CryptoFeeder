{"version":3,"sources":["ReactComponents/Socket.js","ReactComponents/Store/URL.js","ReactComponents/Store/Price.js","ReactComponents/Header.js","ReactComponents/Store/Settings.js","ReactComponents/config/coins.js","ReactComponents/TopBar.js","ReactComponents/Sliders.js","ReactComponents/DataDisplay/Contexts.js","ReactComponents/DataDisplay/ParsedText.js","ReactComponents/DataDisplay/DataDisplay.js","index.js"],"names":["socket","io","priceActions","priceStore","createStore","state","action","newState","type","data","pair","parseFloat","price","toFixed","console","log","on","dispatch","Header","useState","getState","btcPrice","setBtcPrice","isBuy","setIsBuy","useEffect","subscribe","prevBtcPrice","newBtcPrice","priceColour","Fragment","id","style","color","settingsActions","settingsStore","minVolume","minPriceIncrease","minOrderSize","coin","coins","name","symbol","SearchForCoin","searchValue","setSearchValue","predictions","setPredictions","lowerCaseSearchValue","toLowerCase","startsWith","length","push","predictionElements","map","prediction","index","key","predictionStyleWidth","setPredictionStyleWidth","width","document","getElementById","getBoundingClientRect","predictionStyle","position","border","borderRadius","textAlign","zIndex","overflow","backgroundColor","showPredictions","setShowPredictions","placeholder","value","onChange","event","target","onClick","Prediction","props","isHover","setIsHover","mouseOutClassName","className","onMouseEnter","onMouseLeave","TopBar","Slider","defaultValue","sliderValue","setSliderValue","setttingsType","titleText","dataType","min","max","step","minText","maxText","Sliders","AnomaliesContext","createContext","TimeContext","Date","now","SettingsContext","PriceContext","ParsedText","anomaly","element","settings","useContext","timePassed","Math","abs","timestamp","movingTimeString","floor","anomalyTimeRange","limitTimestamp","anomalyTimeRangeString","total","Intl","NumberFormat","format","isBuyVolume","exchange","hourlyMa200","change","positive","range","maRange","isBuySide","maTotal","enterClassName","toGMTString","anomaliesReducer","shift","JSON","parse","stringify","DataDiv","anomalies","relevantAnomalies","slice","toUpperCase","reverse","DataDisplay","useReducer","dispatchAnomalies","setNow","setSettings","setPrice","dataTypes","fetch","then","res","json","recentEventCache","Object","keys","forEach","includes","group","settingStoreUnsubscribe","priceStoreUnsubscribe","threadId","setInterval","clearInterval","dataDivs","Provider","ReactDOM","render"],"mappings":"8XAIeA,E,MADAC,GCFyB,ICElCC,EACY,eAmBZC,EAAaC,aAhBE,SAACC,EAAOC,GACzB,IAAMC,EAAQ,eAAOF,GACrB,OAAQC,EAAOE,MACX,KAAKN,EACDK,EAASD,EAAOG,KAAKC,MAAQC,WAAWL,EAAOG,KAAKG,MAAMC,QAAQ,IAClE,MACJ,QACIC,QAAQC,IAAI,8CAA+CT,EAAOE,MAI1E,OAAOD,IAGU,IAGrBP,EAAOgB,GAAG,iBAAiB,SAAAJ,GACvBE,QAAQC,IAAIH,GACZT,EAAWc,SAAS,CAChBT,KAAMN,EACNO,KAAM,CACFC,KAAM,UACNE,MAAOD,WAAWC,SAKfT,QCRAe,EAxBA,WAAO,IAAD,EACeC,mBAAShB,EAAWiB,WAAX,SADxB,mBACVC,EADU,KACAC,EADA,OAESH,oBAAS,GAFlB,mBAEVI,EAFU,KAEHC,EAFG,KAGjBC,qBAAU,WACNtB,EAAWuB,WAAU,WACjBJ,GAAY,SAAAK,GACR,IAAMC,EAAczB,EAAWiB,WAAX,QAEpB,OADAI,EAASI,GAAeD,GACjBC,UAGhB,IAEH,IAAMC,EAAcN,EAAQ,UAAY,MACxC,OACI,kBAAC,IAAMO,SAAP,KACI,yBAAKC,GAAG,kBAAR,IAA0B,gDAA1B,KACA,yBAAKA,GAAG,2BACJ,uBAAGC,MAAO,CAACC,MAAO,UAAlB,YAAqC,uBAAGD,MAAO,CAACC,MAAOJ,IAAlB,IAAkCR,OCnBjFa,EACiB,oBADjBA,EAEyB,4BAFzBA,EAGqB,wBAHrBA,EAIW,cAmCFC,EAFO/B,aA9BE,SAACC,EAAOC,GAC5B,IAAMC,EAAQ,eAAOF,GACrB,OAAQC,EAAOE,MACX,KAAK0B,EACD3B,EAAS6B,UAAY9B,EAAOG,KAC5B,MACJ,KAAKyB,EACD3B,EAAS8B,iBAAmB/B,EAAOG,KACnC,MACJ,KAAKyB,EACD3B,EAAS+B,aAAehC,EAAOG,KAC/B,MACJ,KAAKyB,EACD3B,EAASgC,KAAOjC,EAAOiC,KACvB,MACJ,QACIzB,QAAQC,IAAI,WAAYT,EAAOE,KAAM,sBAI7C,OAAOD,IAGU,CACjB6B,UAAW,EACXC,iBAAkB,EAClBC,aAAc,EACdC,KAAM,QCqHKC,EAzJD,CACV,CAAEC,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,eACJC,OAAQ,OACZ,CAAED,KAAM,MACJC,OAAQ,OACZ,CAAED,KAAM,eACJC,OAAQ,OACZ,CAAED,KAAM,MACJC,OAAQ,OACZ,CAAED,KAAM,MACJC,OAAQ,aACZ,CAAED,KAAM,MACJC,OAAQ,UACZ,CAAED,KAAM,MACJC,OAAQ,eACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,QACZ,CAAED,KAAM,QACJC,OAAQ,QACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,KACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,SACZ,CAAED,KAAM,cACJC,OAAQ,SACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,gBACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,QACZ,CAAED,KAAM,YACJC,OAAQ,QACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,QACZ,CAAED,KAAM,uBACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,aACJC,OAAQ,OACZ,CAAED,KAAM,MACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,mBACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,cACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,QACZ,CAAED,KAAM,MACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,eACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,kBACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,OACZ,CAAED,KAAM,eACJC,OAAQ,QACZ,CAAED,KAAM,MACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,SACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,uBACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,QACZ,CAAED,KAAM,iBACJC,OAAQ,OACZ,CAAED,KAAM,SACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,wBACJC,OAAQ,OACZ,CAAED,KAAM,kBACJC,OAAQ,QACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,iBACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,aACJC,OAAQ,OACZ,CAAED,KAAM,YACJC,OAAQ,OACZ,CAAED,KAAM,QACJC,OAAQ,OACZ,CAAED,KAAM,OACJC,OAAQ,OACZ,CAAED,KAAM,UACJC,OAAQ,OACZ,CAAED,KAAM,aACJC,OAAQ,QACZ,CAAED,KAAM,eACJC,OAAQ,QACZ,CAAED,KAAM,kBACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,OACZ,CAAED,KAAM,WACJC,OAAQ,QC1IVC,EAAgB,WAAO,IAAD,EACcxB,mBAAS,IADvB,mBACjByB,EADiB,KACJC,EADI,OAMc1B,mBAAS,IANvB,mBAMjB2B,EANiB,KAMJC,EANI,KAOxBtB,qBAAU,WACNsB,EAAe,IACf,IAAMC,EAAuBJ,EAAYK,cAF7B,uBAGZ,IAHY,IAGZ,EAHY,iBAGDV,EAHC,SAIHA,EAAKE,KAAKQ,cAAcC,WAAWF,IAC7BT,EAAKG,OAAOO,cAAcC,WAAWF,KACjB,KAAhBJ,GACXG,GAAe,SAAAD,GAEX,OADIA,EAAYK,OAAS,GAAKL,EAAYM,KAAKb,GACxCO,MANnB,EAAmBN,EAAnB,+CAA2B,IAHf,qFAab,CAACI,IAEJ,IAAMS,EAAqBP,EAAYQ,KAAI,SAACC,EAAYC,GAAb,OACvC,kBAAC,EAAD,CAAYf,KAAMc,EAAWd,KAAMC,OAAQa,EAAWb,OAAQe,IAAKD,OAvB/C,EA0BgCrC,mBAAS,OA1BzC,mBA0BjBuC,EA1BiB,KA0BKC,EA1BL,KA2BxBlC,qBAAU,WACN,IAAMmC,EAAQC,SAASC,eAAe,yBAAyBC,wBAAwBH,MAAQ,KAC/FD,EAAwBC,KACzB,IAEH,IAAMI,EAAkB,CACpBJ,MAAOF,EACPO,SAAU,QACVC,OAAQ,oBACRC,aAAc,OACdC,UAAW,OACXC,OAAQ,GACRC,SAAU,SACVC,gBAAiB,SAxCG,EA2CsBpD,oBAAS,GA3C/B,mBA2CjBqD,EA3CiB,KA2CAC,EA3CA,KAiDxB,OACI,kBAAC,IAAM3C,SAAP,KACI,6BACI,2BAAOC,GAAG,wBAAwB2C,YAAY,kBACvCC,MAAO/B,EAAagC,SAnDZ,SAAAC,GACvBhC,EAAegC,EAAMC,OAAOH,QAkDqCI,QAAS,kBAAMN,GAAmB,MAEvF3B,EAAYK,OAAS,GAAKqB,GACtB,yBAAKxC,MAAOgC,EAAiBe,QAZlB,WAC7BN,GAAmB,GACnB5B,EAAe,MAWQQ,MAQvB2B,EAAa,SAAAC,GAAU,IAAD,EACM9D,oBAAS,GADf,mBACjB+D,EADiB,KACRC,EADQ,KAkBlBC,EAAoBF,EAAU,GAAK,uBAEzC,OACI,yBAAKG,UAAW,qBAAuBD,EAClCE,aAfgB,WACrBH,GAAW,IAc0BI,aAnBjB,WACpBJ,GAAW,IAmBNJ,QAZY,WACjB5C,EAAclB,SAAS,CACnBT,KAAM0B,EACNK,KAAM0C,EAAMvC,WAUXuC,EAAMxC,KAHX,KAGmBwC,EAAMvC,OAHzB,MAQO8C,EAtGA,WACX,OACI,kBAAC,IAAM1D,SAAP,KACI,kBAAC,EAAD,QCJN2D,EAAS,SAACR,GAAW,IAAD,EACgB9D,mBAAS8D,EAAMS,cAD/B,mBACfC,EADe,KACFC,EADE,KAQtBnE,qBAAU,WACNU,EAAclB,SAAS,CAACT,KAAMyE,EAAMY,cAAepF,KAAMkF,MAC1D,CAACA,IAEJ,IAAMG,EAAa,WACf,OAAQb,EAAMc,UACV,IAAK,SACD,MAAO,iBACX,IAAK,QACD,MAAO,yBACX,IAAK,YACD,MAAO,qBACX,QACI,MAAM,iCAAN,OAAwCd,EAAMc,SAA9C,MATO,GAanB,OACI,yBAAKhE,GAAE,cAASkD,EAAMc,SAAf,gBACH,4BAAKD,EAAL,KAAiB,uBAAG9D,MAAO,CAACC,MAAO,SAAU0D,IAC7C,2BAAOnF,KAAK,QAAQwF,IAAK,IAAKC,IAAKhB,EAAMgB,IAAKC,KAAMjB,EAAMiB,KAAMnE,GAAG,OAAO6C,SAzBvD,SAACC,GACxBe,EAAef,EAAMC,OAAOH,QAwBgFA,MAAOgB,IAC/G,6BACI,4BAAQN,UAAU,aAAlB,UAAkCJ,EAAMkB,UACxC,4BAAQd,UAAU,aAAlB,UAAkCJ,EAAMmB,aAoBzCC,EAdC,WACZ,OACI,kBAAC,IAAMvE,SAAP,KACI,kBAAC,EAAD,CAAQiE,SAAU,SAAUF,cAAe3D,EACnC+D,IAAK,UAAWC,KAAM,IAAMC,QAAS,KAAMC,QAAS,aAAcV,aAAc,MACxF,kBAAC,EAAD,CAAQK,SAAU,QAASF,cAAe3D,EAClC+D,IAAK,KAAMC,KAAM,IAAKC,QAAS,KAAMC,QAAS,MAAOV,aAAc,MAC3E,kBAAC,EAAD,CAAQK,SAAU,YAAaF,cAAe3D,EACtC+D,IAAK,UAAWC,KAAM,IAAKC,QAAS,KAAMC,QAAS,aAAcV,aAAc,Q,QC5C7FY,EAAmBC,0BACnBC,EAAcD,wBAAcE,KAAKC,OACjCC,EAAkBJ,wBAAcpE,EAAcf,YAC9CwF,EAAeL,wBAAcpG,EAAWiB,WAAX,SC4DpByF,EAhEI,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,QAASf,EAAc,EAAdA,SACtBgB,EAAU,GACRC,EAAWC,qBAAWN,GACtB/F,EAAQqG,qBAAWL,GACnBM,EAAaC,KAAKC,IAAIH,qBAAWT,GAAwC,IAAzBM,EAAQrG,KAAK4G,WAC7DC,EAAmBJ,EAAa,KAAaA,EAAa,KAAiB,GAC3E,IAAMC,KAAKI,MAAML,EAAa,IAAO,IAAM,gBAC3C,IAAMC,KAAKI,MAAML,EAAa,KAAQ,gBAEtCM,EAA4C,IAAzBV,EAAQrG,KAAK4G,UAAmBP,EAAQrG,KAAKgH,eAChEC,EAAyBF,EAAmB,KAAaL,KAAKC,IAAID,KAAKI,MAAMC,EAAmB,IAAO,KAAO,YAAcL,KAAKC,IAAID,KAAKI,MAAMC,EAAmB,MAAS,YAElL,GAAIV,EAAQvE,OAASyE,EAASzE,MAA0B,QAAlByE,EAASzE,KAC3C,OAAQuE,EAAQtG,MACZ,IAAK,gBACGsG,EAAQrG,KAAKkH,MAAQ/G,GAASoG,EAAS5E,YACvC2E,EAAU,uBAAG1B,UAAS,UAAKU,EAAL,UAAZ,IACJ6B,KAAKC,eAAeC,QAAQhB,EAAQrG,KAAKkH,MAAQ/G,GAAOC,QAAQ,IAAM,IADlE,aACiFiG,EAAQvE,KAAO,IADhG,OAEDuE,EAAQrG,KAAKsH,YAAc,UAAY,QAFtC,OAEmDjB,EAAQkB,SAAW,IAFtE,eAGON,EAHP,KAIL,KAA6D,KAArDZ,EAAQrG,KAAKkH,MAAQb,EAAQrG,KAAKwH,YAAc,IAAUpH,QAAQ,GAAK,KAJ1E,uCAKLyG,IAGT,MACJ,IAAK,oBACyB,IAAtBR,EAAQrG,KAAKyH,QAAgBlB,EAAS3E,mBACtC0E,EAAU,uBAAG1B,UAAS,UAAKU,EAAL,UACjBe,EAAQvE,KADH,SACeuE,EAAQrG,KAAK0H,SAAW,UAAY,WACjC,IAAtBrB,EAAQrG,KAAKyH,QAAcrH,QAAQ,GAF/B,iBAGO6G,EAHP,KAIL,KAAyD,KAAjDZ,EAAQrG,KAAK2H,MAAQtB,EAAQrG,KAAK4H,QAAU,IAAUxH,QAAQ,GAAK,IAJtE,sCAKL,IAAMyG,IAGf,MAEJ,IAAK,oBACGR,EAAQrG,KAAKkH,MAAQ/G,GAASoG,EAAS1E,eACvCyE,EAAU,uBAAG1B,UAAS,UAAKU,EAAL,UAAZ,IACJ6B,KAAKC,eAAeC,QAAQhB,EAAQrG,KAAKkH,MAAQ/G,GAAOC,QAAQ,IAD5D,IACkEiG,EAAQrG,KAAK6H,UAAY,OAAS,OADpG,aACsHxB,EAAQvE,KAAO,IADrI,YAEI+E,EAFJ,OAE0BR,EAAQkB,SAFlC,SAEoG,KAAjDlB,EAAQrG,KAAKkH,MAAQb,EAAQrG,KAAK8H,QAAU,IAAU1H,QAAQ,GAFjH,2CAU1B,IAAM2H,EAAiB1B,EAAQrG,KAAK6H,WAAaxB,EAAQrG,KAAKsH,aAAejB,EAAQrG,KAAK0H,SAAW,iBAAmB,kBAExH,OAEYpB,EACI,yBAAKhF,GAAE,UAAKgE,EAAL,WAAwBV,UAAS,mBAAcU,EAAd,gBAA8ByC,IACjEzB,EACD,uBAAG1B,UAAU,kBAAkB,IAAIoB,KAA8B,IAAzBK,EAAQrG,KAAK4G,WAAkBoB,gBAG3E,kBAAC,IAAM3G,SAAP,OCtDd4G,EAAmB,SAACrI,EAAOC,GAAY,IAAD,GACxC,EAAAD,EAAMC,EAAOE,OAAM4C,KAAnB,oBAA2B9C,EAAOG,OAOlC,OALIJ,EAAMC,EAAOE,MAAM2C,OADT,KAEV9C,EAAMC,EAAOE,MAAMmI,QAIhBC,KAAKC,MAAMD,KAAKE,UAAUzI,KA2E/B0I,EAAU,SAAC9D,GACb,IAAM+D,EAAY/B,qBAAWX,GACvBP,EAAWd,EAAMc,SAGjBkD,EAAoBD,EAAU/D,EAAMc,UAAUzC,KAAI,SAACwD,EAAStD,GAC9D,OACI,kBAAC,EAAD,CAAYuC,SAAUA,EAAUe,QAASA,EAASrD,IAAKD,OAI/D,OACI,yBAAKzB,GAAE,UAAKgE,EAAL,cACH,sCAAQA,EAASmD,MAAM,EAAE,GAAGC,eAA5B,OAA4CpD,EAASmD,MAAM,KAC3D,6BAEMD,EAAkBG,aAMrBC,EA9FK,WAChB,IADsB,EAOiBC,qBAAWZ,EAN7B,CACjB,OAAgB,GAChB,MAAgB,GAChB,UAAgB,KAJE,mBAOfM,EAPe,KAOJO,EAPI,OAQApI,mBAASsF,KAAKC,OARd,mBAQfA,EARe,KAQV8C,EARU,OASUrI,mBAASgB,EAAcf,YATjC,mBASf4F,EATe,KASLyC,EATK,OAUItI,mBAAShB,EAAWiB,WAAX,SAVb,mBAUfR,EAVe,KAUR8I,EAVQ,KAWhBC,EAAY,CAAC,SAAU,QAAS,aAItClI,qBAAU,WAENmI,MAAM,GAAD,OTnC2B,GSmC3B,sBAA4BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OAAOF,MAAK,SAAAG,GACzDC,OAAOC,KAAKF,GAAkBG,SAAQ,SAAA1G,GAC9BkG,EAAUS,SAAS3G,IACnB8F,EAAkB,CAAC/I,KAAMiD,EAAKhD,KAAMuJ,EAAiBvG,cAMjEzD,EAAOgB,GAAG,eAAe,SAAC8F,GACtByC,EAAkB,CAAC/I,KAAMsG,EAAQuD,MAAO5J,KAAM,CAACqG,UAEpD,IAGHrF,qBAAU,WACN,IAAM6I,EAA0BnI,EAAcT,WAAU,WACpD+H,EAAYtH,EAAcf,eAGxBmJ,EAAwBpK,EAAWuB,WAAU,WAC/CgI,EAASvJ,EAAWiB,WAAX,YAGb,OAAO,WACHkJ,IACAC,OAEL,IAGH9I,qBAAU,WACN,IAAM+I,EAAWC,aAAY,WACzBjB,EAAO/C,KAAKC,SACb,KAEH,OAAO,kBAAMgE,cAAcF,MAC5B,IAEH,IAAMG,EAAWhB,EAAUrG,KAAI,SAAC9C,EAAMgD,GAAP,OAAiB,kBAAC,EAAD,CAASuC,SAAUvF,EAAMiD,IAAKD,OAC9E,OACI,kBAAC,IAAM1B,SAAP,KACI,kBAAC6E,EAAgBiE,SAAjB,CAA0BjG,MAAOqC,GAC7B,kBAACJ,EAAagE,SAAd,CAAuBjG,MAAO/D,GAC1B,kBAAC4F,EAAYoE,SAAb,CAAsBjG,MAAO+B,GACzB,kBAACJ,EAAiBsE,SAAlB,CAA2BjG,MAAOqE,GAC7B2B,QCpE7BE,IAASC,OAAO,kBAAC,EAAD,MAAWjH,SAASC,eAAe,eACnD+G,IAASC,OAAO,kBAAC,EAAD,MAAWjH,SAASC,eAAe,gBACnD+G,IAASC,OAAO,kBAAC,EAAD,MAAYjH,SAASC,eAAe,gBACpD+G,IAASC,OAAO,kBAAC,EAAD,MAAgBjH,SAASC,eAAe,e","file":"static/js/main.ad018a87.chunk.js","sourcesContent":["import io from \"socket.io-client\";\nimport URL from \"./Store/URL\";\n\nconst socket = io(URL);\nexport default socket;\n","const isDev = false;\nconst URL =  isDev ? \"localhost:3000\" : \"\";\n\nexport default URL;","import { createStore } from \"redux\";\nimport socket from \"../Socket\";\n\nconst priceActions = {\n    UPDATE_PRICE: \"UPDATE_PRICE\",\n};\n\nconst priceReducer = (state, action) => {\n    const newState = {...state}; //shallow copy is sufficient here\n    switch (action.type) {\n        case priceActions.UPDATE_PRICE:\n            newState[action.data.pair] = parseFloat(action.data.price.toFixed(0));\n            break;\n        default:\n            console.log(\"Invalid action type for priceReducer, got: \", action.type);\n            break;\n    }\n\n    return newState;\n};\n\nconst initialState = {};\n\nconst priceStore = createStore(priceReducer, initialState);\nsocket.on(\"NEW_BTC_PRICE\", price => {\n    console.log(price);\n    priceStore.dispatch({\n        type: priceActions.UPDATE_PRICE,\n        data: {\n            pair: \"BTCUSDT\",\n            price: parseFloat(price)\n        }\n    })\n});\n\nexport default priceStore;\nexport { priceReducer };","import React, {useEffect, useState} from \"react\";\nimport priceStore from \"./Store/Price\";\n\nconst Header = () => {\n    const [btcPrice, setBtcPrice] = useState(priceStore.getState()[\"BTCUSDT\"]);\n    const [isBuy, setIsBuy] = useState(true);\n    useEffect(() => {\n        priceStore.subscribe(() => {\n            setBtcPrice(prevBtcPrice => {\n                const newBtcPrice = priceStore.getState()[\"BTCUSDT\"];\n                setIsBuy(newBtcPrice >= prevBtcPrice);\n                return newBtcPrice;\n            });\n        });\n    }, []);\n\n    const priceColour = isBuy ? \"#26A83A\" : \"red\";\n    return (\n        <React.Fragment>\n            <div id=\"title_text_div\"> <h3>cryptofeeder.com</h3> </div>\n            <div id=\"login_signup_button_div\">\n                <p style={{color: \"white\"}}>BTCUSDT: <b style={{color: priceColour}}>${btcPrice}</b></p>\n            </div>\n        </React.Fragment>\n    )\n};\n\nexport default Header;","import { createStore } from \"redux\";\n\nconst settingsActions = {\n    UPDATE_MIN_VOLUME: \"UPDATE_MIN_VOLUME\",\n    UPDATE_MIN_PRICE_INCREASE: \"UPDATE_MIN_PRICE_INCREASE\",\n    UPDATE_MIN_ORDER_SIZE: \"UPDATE_MIN_ORDER_SIZE\",\n    UPDATE_COIN: \"UPDATE_COIN\",\n};\n\nconst settingsReducer = (state, action) => {\n    const newState = {...state}; // Cannot mutate the current state, must be a copy\n    switch (action.type) {\n        case settingsActions.UPDATE_MIN_VOLUME:\n            newState.minVolume = action.data;\n            break;\n        case settingsActions.UPDATE_MIN_PRICE_INCREASE:\n            newState.minPriceIncrease = action.data;\n            break;\n        case settingsActions.UPDATE_MIN_ORDER_SIZE:\n            newState.minOrderSize = action.data;\n            break;\n        case settingsActions.UPDATE_COIN:\n            newState.coin = action.coin;\n            break;\n        default:\n            console.log(\"ERROR! '\", action.type, \"' is not an action\");\n            break;\n    }\n\n    return newState;\n};\n\nconst initialState = {\n    minVolume: 0,\n    minPriceIncrease: 0,\n    minOrderSize: 0,\n    coin: \"all\"\n};\n\nconst settingsStore = createStore(settingsReducer, initialState);\n\nexport default settingsStore;\nexport {settingsActions};","const coins = [\n    { name: \"Ethereum\",\n        symbol: \"ETH\", },\n    { name: \"Litecoin\",\n        symbol: \"LTC\", },\n    { name: \"Binance Coin\",\n        symbol: \"BNB\", },\n    { name: \"NEO\",\n        symbol: \"NEO\", },\n    { name: \"Bitcoin Cash\",\n        symbol: \"BCC\", },\n    { name: \"Gas\",\n        symbol: \"GAS\", },\n    { name: \"HSR\",\n        symbol: \"HyperCash\", },\n    { name: \"MCO\",\n        symbol: \"Monaco\", },\n    { name: \"WTC\",\n        symbol: \"Waltonchain\", },\n    { name: \"Loopring\",\n        symbol: \"LRC\", },\n    { name: \"Quantum\",\n        symbol: \"QTUM\", },\n    { name: \"YOYOW\",\n        symbol: \"YOYO\", },\n    { name: \"OmiseGo\",\n        symbol: \"OMG\", },\n    { name: \"0x\",\n        symbol: \"ZRX\", },\n    { name: \"Stratis\",\n        symbol: \"STRAT\", },\n    { name: \"SingularDTV\",\n        symbol: \"SNGLS\", },\n    { name: \"Ethos\",\n        symbol: \"BQX\", },\n    { name: \"Kyber Network\",\n        symbol: \"KNC\", },\n    { name: \"Funfair\",\n        symbol: \"FUN\", },\n    { name: \"SONM\",\n        symbol: \"SNM\", },\n    { name: \"Iota\",\n        symbol: \"IOTA\", },\n    { name: \"ChainLink\",\n        symbol: \"LINK\", },\n    { name: \"Verge\",\n        symbol: \"XVG\", },\n    { name: \"Salt\",\n        symbol: \"SALT\", },\n    { name: \"Moeda Loyalty Points\",\n        symbol: \"MDA\", },\n    { name: \"Metal\",\n        symbol: \"MTL\", },\n    { name: \"Substratum\",\n        symbol: \"SUB\", },\n    { name: \"Eos\",\n        symbol: \"EOS\", },\n    { name: \"Status\",\n        symbol: \"SNT\", },\n    { name: \"Ethereum Classic\",\n        symbol: \"ETC\", },\n    { name: \"Mithril\",\n        symbol: \"MTH\", },\n    { name: \"Enigma\",\n        symbol: \"ENG\", },\n    { name: \"District 0x\",\n        symbol: \"DNT\", },\n    { name: \"Zcash\",\n        symbol: \"ZEC\", },\n    { name: \"Bancor\",\n        symbol: \"BNT\", },\n    { name: \"Airswap\",\n        symbol: \"AST\", },\n    { name: \"Dash\",\n        symbol: \"DASH\", },\n    { name: \"OAX\",\n        symbol: \"OAX\", },\n    { name: \"Iconomi\",\n        symbol: \"ICN\", },\n    { name: \"Bitcoin Gold\",\n        symbol: \"BTG\", },\n    { name: \"Everex\",\n        symbol: \"EVX\", },\n    { name: \"Request Network\",\n        symbol: \"REQ\", },\n    { name: \"Viberate\",\n        symbol: \"VIB\", },\n    { name: \"Tron\",\n        symbol: \"TRX\", },\n    { name: \"Power Ledger\",\n        symbol: \"POWR\", },\n    { name: \"Ark\",\n        symbol: \"ARK\", },\n    { name: \"Ripple\",\n        symbol: \"XRP\", },\n    { name: \"Enjin\",\n        symbol: \"ENJ\", },\n    { name: \"Storj\",\n        symbol: \"STROJ\", },\n    { name: \"VeChain\",\n        symbol: \"VEN\", },\n    { name: \"Komodo\",\n        symbol: \"KMD\", },\n    { name: \"Ripio Credit Network\",\n        symbol: \"RCN\", },\n    { name: \"Nuls\",\n        symbol: \"NULS\", },\n    { name: \"Raiden Network\",\n        symbol: \"RDN\", },\n    { name: \"Monero\",\n        symbol: \"XMR\", },\n    { name: \"Agrello\",\n        symbol: \"DLT\", },\n    { name: \"Ambrosus\",\n        symbol: \"AMB\", },\n    { name: \"Basic Attention Token\",\n        symbol: \"BAT\", },\n    { name: \"Bitcoin Private\",\n        symbol: \"BCPT\", },\n    { name: \"Aeron\",\n        symbol: \"ARN\", },\n    { name: \"Genesis Vision\",\n        symbol: \"GVT\", },\n    { name: \"Blox\",\n        symbol: \"CDT\", },\n    { name: \"GXChain\",\n        symbol: \"GXS\", },\n    { name: \"Po.et\",\n        symbol: \"POE\", },\n    { name: \"Quantstamp\",\n        symbol: \"QSP\", },\n    { name: \"BitShares\",\n        symbol: \"BTS\", },\n    { name: \"ZCoin\",\n        symbol: \"XCZ\", },\n    { name: \"Lisk\",\n        symbol: \"LSK\", },\n    { name: \"Tierion\",\n        symbol: \"TNT\", },\n    { name: \"Etherparty\",\n        symbol: \"FUEL\", },\n    { name: \"Decentraland\",\n        symbol: \"MANA\", },\n    { name: \"Bitcoin Diamond\",\n        symbol: \"BCD\", },\n    { name: \"Ethereum\",\n        symbol: \"ETH\", },\n    { name: \"DigixDAO\",\n        symbol: \"DGD\", },\n    { name: \"Ethereum\",\n        symbol: \"ETH\", },\n];\n\nexport default coins;","import React, {useEffect, useState} from \"react\";\nimport settingsStore, {settingsActions} from \"./Store/Settings\";\nimport coins from \"./config/coins\";\n\nconst TopBar = () => {\n    return (\n        <React.Fragment>\n            <SearchForCoin/>\n        </React.Fragment>\n    );\n};\n\nconst SearchForCoin = () => {\n    const [searchValue, setSearchValue] = useState(\"\");\n    const handleSearchChange = event => {\n        setSearchValue(event.target.value);\n    };\n\n    const [predictions, setPredictions] = useState([]);\n    useEffect(() => {\n        setPredictions([]);\n        const lowerCaseSearchValue = searchValue.toLowerCase();\n        for (const coin of coins) {\n            if ((coin.name.toLowerCase().startsWith(lowerCaseSearchValue)\n                    || coin.symbol.toLowerCase().startsWith(lowerCaseSearchValue))\n                        && searchValue !== \"\") {\n                setPredictions(predictions => {\n                    if (predictions.length < 5) { predictions.push(coin); }\n                    return predictions;\n                });\n            }\n        }\n    }, [searchValue]);\n\n    const predictionElements = predictions.map((prediction, index) =>\n        <Prediction name={prediction.name} symbol={prediction.symbol} key={index}/>\n    );\n\n    const [predictionStyleWidth, setPredictionStyleWidth] = useState(\"0px\");\n    useEffect(() => { // on mount initialise the width of prediction div to be the same as the input search\n        const width = document.getElementById(\"search_for_coin_input\").getBoundingClientRect().width + \"px\";\n        setPredictionStyleWidth(width);\n    }, []);\n\n    const predictionStyle = {\n        width: predictionStyleWidth,\n        position: \"fixed\",\n        border: \"1px solid #D8D8D8\",\n        borderRadius: \"10px\",\n        textAlign: \"left\",\n        zIndex: 20,\n        overflow: \"hidden\",\n        backgroundColor: \"white\"\n    };\n\n    const [showPredictions, setShowPredictions] = useState(false);\n    const handlePredictionSelect = () => {\n      setShowPredictions(false);\n      setSearchValue(\"\");\n    };\n\n    return (\n        <React.Fragment>\n            <div>\n                <input id=\"search_for_coin_input\" placeholder=\"Search for coin\"\n                       value={searchValue} onChange={handleSearchChange} onClick={() => setShowPredictions(true)}/>\n                {\n                    predictions.length > 0 && showPredictions &&\n                        <div style={predictionStyle} onClick={handlePredictionSelect}>\n                            {predictionElements}\n                        </div>\n                }\n            </div>\n        </React.Fragment>\n    );\n};\n\nconst Prediction = props => {\n    const [isHover, setIsHover] = useState(true);\n\n    const toggleHoverExit = () => {\n        setIsHover(false);\n    };\n\n    const toggleHoverEnter = () => {\n        setIsHover(true);\n    };\n\n    const handleSelect = () => {\n        settingsStore.dispatch({\n            type: settingsActions.UPDATE_COIN,\n            coin: props.symbol\n        });\n    };\n\n    const mouseOutClassName = isHover ? \"\" : \"prediction_mouse_out\";\n\n    return (\n        <div className={\"search_prediction \" + mouseOutClassName}\n             onMouseEnter={toggleHoverEnter} onMouseLeave={toggleHoverExit}\n             onClick={handleSelect}>\n            {props.name} ({props.symbol})\n        </div>\n    )\n};\n\nexport default TopBar;","import React, {useState, useEffect} from \"react\";\nimport settingsStore, {settingsActions} from \"./Store/Settings\";\n\nconst Slider = (props) => {\n    const [sliderValue, setSliderValue] = useState(props.defaultValue);\n\n    const handleSliderChange = (event) => {\n        setSliderValue(event.target.value);\n    };\n\n    // Initialise/Update the settings store every time sliderValue changes\n    useEffect(() => {\n        settingsStore.dispatch({type: props.setttingsType, data: sliderValue});\n    }, [sliderValue]);\n\n    const titleText = (() => {\n        switch (props.dataType) {\n            case \"volume\":\n                return \"Minimum volume\";\n            case \"price\":\n                return \"Minimum price increase\";\n            case \"liquidity\":\n                return \"Minimum order size\";\n            default:\n                return `Error! Invalid datatype, got '${props.dataType}'`;\n        }\n    })();\n\n    return (\n        <div id={`min_${props.dataType}_slider_div`}>\n            <h2>{titleText}: <b style={{color: \"grey\"}}>{sliderValue}</b></h2>\n            <input type=\"range\" min={\"0\"} max={props.max} step={props.step} id=\"test\" onChange={handleSliderChange} value={sliderValue}/>\n            <div>\n                <strong className=\"min_value\">{`${props.minText}`}</strong>\n                <strong className=\"max_value\">{`${props.maxText}`}</strong>\n            </div>\n        </div>\n    )\n};\n\nconst Sliders = () => {\n    return (\n        <React.Fragment>\n            <Slider dataType={\"volume\"} setttingsType={settingsActions.UPDATE_MIN_VOLUME}\n                    max={\"1000000\"} step={\"1\"}  minText={\"$0\"} maxText={\"$1,000,000\"} defaultValue={\"0\"}/>\n            <Slider dataType={\"price\"} setttingsType={settingsActions.UPDATE_MIN_PRICE_INCREASE}\n                    max={\"50\"} step={\"1\"} minText={\"0%\"} maxText={\"50%\"} defaultValue={\"0\"}/>\n            <Slider dataType={\"liquidity\"} setttingsType={settingsActions.UPDATE_MIN_ORDER_SIZE}\n                    max={\"3000000\"} step={\"1\"} minText={\"$0\"} maxText={\"$3,000,000\"} defaultValue={\"0\"}/>\n        </React.Fragment>\n\n    )\n};\n\nexport default Sliders;","import {createContext} from \"react\";\nimport settingsStore from \"../Store/Settings\";\nimport priceStore from \"../Store/Price\";\n\nconst AnomaliesContext = createContext();\nconst TimeContext = createContext(Date.now());\nconst SettingsContext = createContext(settingsStore.getState());\nconst PriceContext = createContext(priceStore.getState()[\"BTCUSDT\"]);\n\nexport {\n    AnomaliesContext,\n    TimeContext,\n    SettingsContext,\n    PriceContext\n}","import React, {useContext, useEffect, useState} from \"react\";\nimport {PriceContext, SettingsContext, TimeContext} from \"./Contexts\";\n\nconst ParsedText = ({anomaly, dataType}) => {\n    let element = \"\";\n    const settings = useContext(SettingsContext);\n    const price = useContext(PriceContext);\n    const timePassed = Math.abs(useContext(TimeContext) - anomaly.data.timestamp * 1000);\n    const movingTimeString = timePassed > 120 * 1000 ? timePassed > 60 * 1000 * 60 ? \"\"\n        : \"(\" + Math.floor(timePassed / 1000 / 60) + \" minutes ago)\"\n        : \"(\" + Math.floor(timePassed / 1000) + \" seconds ago)\";\n\n    const anomalyTimeRange = anomaly.data.timestamp * 1000 - anomaly.data.limitTimestamp;\n    const anomalyTimeRangeString = anomalyTimeRange > 120 * 1000 ? Math.abs(Math.floor(anomalyTimeRange / 1000 / 60)) + \" minutes \" : Math.abs(Math.floor(anomalyTimeRange / 1000)) + \" seconds \";\n\n    if (anomaly.coin === settings.coin || settings.coin === \"all\") {\n        switch (anomaly.type) {\n            case \"volumeAnomaly\":\n                if (anomaly.data.total * price >= settings.minVolume) {\n                    element = <p className={`${dataType}_text`}>\n                        ${Intl.NumberFormat().format((anomaly.data.total * price).toFixed(2)) + \" \"} worth of {anomaly.coin + \" \"}\n                        was {anomaly.data.isBuyVolume ? \"bought \" : \"sold \"} on {anomaly.exchange + \" \"}\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.total / anomaly.data.hourlyMa200 - 1) * 100).toFixed(2) + \"% \"} higher than the 200 hourly average.\n                        {movingTimeString}\n                    </p>;\n                }\n                break;\n            case \"anomalyPriceRange\":\n                if (anomaly.data.change * 100 >= settings.minPriceIncrease) {\n                    element = <p className={`${dataType}_text`}>\n                        {anomaly.coin} just {anomaly.data.positive ? \"pumped \" : \"dumped \"}\n                        {(anomaly.data.change * 100).toFixed(2)}%\n                        in the past {anomalyTimeRangeString} -\n                        {\" \" + ((anomaly.data.range / anomaly.data.maRange - 1) * 100).toFixed(2) + \"%\"} higher than the 200 hourly average\n                        {\" \" + movingTimeString}\n                    </p>\n                }\n                break;\n\n            case \"OrderBookIncrease\":\n                if (anomaly.data.total * price >= settings.minOrderSize) {\n                    element = <p className={`${dataType}_text`}>\n                        ${Intl.NumberFormat().format((anomaly.data.total * price).toFixed(0))} {anomaly.data.isBuySide ? \"buy \" : \"sell\"} wall for {anomaly.coin + \" \"}\n                        appeared {movingTimeString} on {anomaly.exchange} - A {((anomaly.data.total / anomaly.data.maTotal - 1) * 100).toFixed(2)}% increase\n                        from the 200 hourly average\n                    </p>\n                }\n                break;\n        }\n    }\n\n    const enterClassName = anomaly.data.isBuySide || anomaly.data.isBuyVolume || anomaly.data.positive ? \"enter_buy_data\" : \"enter_sell_data\";\n\n    return (\n        (() =>\n                element ?\n                    <div id={`${dataType}_data_1`} className={`data_box ${dataType}_box ${enterClassName}`}>\n                        {element}\n                        <p className=\"data_timestamp\">{new Date(anomaly.data.timestamp * 1000).toGMTString()}</p>\n                    </div>\n                    :\n                    <React.Fragment/>\n        )()\n    );\n};\n\nexport default ParsedText;","import React, {useEffect, useReducer, useContext, useState, createContext} from \"react\";\nimport socket from \"../Socket\";\nimport settingsStore from \"../Store/Settings\";\nimport priceStore from \"../Store/Price\";\nimport {AnomaliesContext, TimeContext, SettingsContext, PriceContext} from \"./Contexts\";\nimport ParsedText from \"./ParsedText\";\nimport URL from \"../Store/URL\";\n\nconst anomaliesReducer = (state, action) => {\n    state[action.type].push(...action.data);\n    const LIMIT = 500;\n    if (state[action.type].length > LIMIT) {\n        state[action.type].shift();\n    }\n\n    // Do a deep copy here, so that on next comparison, react knows that the state has changed ({} !== {})\n    return JSON.parse(JSON.stringify(state));\n};\n\nconst DataDisplay = () => {\n    const initialState = {\n        \"volume\":       [],\n        \"price\":        [],\n        \"liquidity\":    [],\n    };\n\n    const [anomalies, dispatchAnomalies] = useReducer(anomaliesReducer, initialState);\n    const [now, setNow] = useState(Date.now());\n    const [settings, setSettings] = useState(settingsStore.getState());\n    const [price, setPrice] = useState(priceStore.getState()[\"BTCUSDT\"]);\n    const dataTypes = [\"volume\", \"price\", \"liquidity\"];\n\n\n    // Initialise the anomalies\n    useEffect(() => {\n        //Hit the cache api and set the initial state\n        fetch(`${URL}/api/little_cache`).then(res => res.json().then(recentEventCache => {\n            Object.keys(recentEventCache).forEach(key => {\n                if (dataTypes.includes(key)) {\n                    dispatchAnomalies({type: key, data: recentEventCache[key]});\n                }\n            })\n        }));\n\n        //Subscribe to anomalies to push to anomalies state\n        socket.on(\"NEW_ANOMALY\", (anomaly) => {\n            dispatchAnomalies({type: anomaly.group, data: [anomaly]});\n        });\n    }, []);\n\n    // Subscribe to stores\n    useEffect(() => {\n        const settingStoreUnsubscribe = settingsStore.subscribe(() => {\n            setSettings(settingsStore.getState());\n        });\n\n        const priceStoreUnsubscribe = priceStore.subscribe(() => {\n            setPrice(priceStore.getState()[\"BTCUSDT\"]);\n        });\n\n        return () => {\n            settingStoreUnsubscribe();\n            priceStoreUnsubscribe();\n        }\n    }, []);\n\n    // Start setNow interval\n    useEffect(() => {\n        const threadId = setInterval(() => {\n            setNow(Date.now());\n        }, 1000);\n\n        return () => clearInterval(threadId);\n    }, []);\n\n    const dataDivs = dataTypes.map((type, index) => <DataDiv dataType={type} key={index}/>);\n    return (\n        <React.Fragment>\n            <SettingsContext.Provider value={settings}>\n                <PriceContext.Provider value={price}>\n                    <TimeContext.Provider value={now}>\n                        <AnomaliesContext.Provider value={anomalies}>\n                            {dataDivs}\n                        </AnomaliesContext.Provider>\n                    </TimeContext.Provider>\n                </PriceContext.Provider>\n            </SettingsContext.Provider>\n        </React.Fragment>\n    );\n};\n\nconst DataDiv = (props) => {\n    const anomalies = useContext(AnomaliesContext);\n    const dataType = props.dataType;\n\n    // Loop through all anomalies of that type and parse the anomaly into text\n    const relevantAnomalies = anomalies[props.dataType].map((anomaly, index) => {\n        return (\n            <ParsedText dataType={dataType} anomaly={anomaly} key={index}/>\n        );\n    });\n\n    return (\n        <div id={`${dataType}_data_div`}>\n            <h1>{`${dataType.slice(0,1).toUpperCase()}${dataType.slice(1)}`}</h1>\n            <div>\n                { //Anomalies are organised with oldest -> newest (needs to be reversed)\n                  relevantAnomalies.reverse() }\n            </div>\n        </div>\n    )\n};\n\nexport default DataDisplay;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./css/data.css\";\nimport \"./css/generic.css\";\nimport \"./css/header.css\";\nimport \"./css/main.css\";\nimport \"./css/slider.css\";\nimport \"./css/topBar.css\";\n\nimport Header from \"./ReactComponents/Header\";\nimport TopBar from \"./ReactComponents/TopBar\";\nimport Sliders from \"./ReactComponents/Sliders\";\nimport DataDisplay from \"./ReactComponents/DataDisplay/DataDisplay\";\n\nReactDOM.render(<Header/>, document.getElementById(\"header_div\"));\nReactDOM.render(<TopBar/>, document.getElementById(\"top_bar_div\"));\nReactDOM.render(<Sliders/>, document.getElementById(\"sliders_div\"));\nReactDOM.render(<DataDisplay/>, document.getElementById(\"data_div\"));"],"sourceRoot":""}